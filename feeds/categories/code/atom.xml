<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Romain Pellerin's Blog - Code</title><link href="https://romainpellerin.eu/" rel="alternate"></link><link href="//romainpellerin.eu/feeds/categories/code/atom.xml" rel="self"></link><id>https://romainpellerin.eu/</id><updated>2025-04-24T15:57:00+02:00</updated><entry><title>Kotlin</title><link href="https://romainpellerin.eu/kotlin.html" rel="alternate"></link><published>2024-07-26T15:10:00+02:00</published><updated>2025-04-24T15:57:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2024-07-26:/kotlin.html</id><summary type="html">&lt;p&gt;Cheatsheet for beginners - such as myself!&lt;/p&gt;</summary><content type="html">&lt;h1 id="setup"&gt;Setup&lt;/h1&gt;
&lt;h2 id="install-kotlin"&gt;Install Kotlin&lt;/h2&gt;
&lt;p&gt;Installing Kotlin is not necessary. Only Java is. IntelliJ Ultimate Edition (paid) or Community Edition (free) both come with the Kotlin plugin bundled and enabled by default.&lt;/p&gt;
&lt;h2 id="install-java-required"&gt;Install Java (required)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt install openjdk-21-jdk &lt;span class="c1"&gt;# or newer, check with `apt search openjdk`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="install-apache-maven"&gt;Install Apache Maven&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/66399278/having-maven-plugins-in-intellij-idea-without-maven-installation-in-computer"&gt;Installing Maven, a popular build tool, is not required, as IntelliJ comes with a bundled version of Maven.&lt;/a&gt; However, installing your own version might come in handy, to be able to run Maven from the command line outside IntelliJ, or to run a specific version of Maven. &lt;strong&gt;It does not hurt to install Maven globally on the system, it won't conflict with IntelliJ's Maven, but it is not recommended.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update
sudo apt install maven
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="maven-wrapper"&gt;Maven Wrapper&lt;/h3&gt;
&lt;p&gt;A better alternative to installing Maven system-wide is to &lt;a href="https://maven.apache.org/wrapper/"&gt;use the Maven Wrapper in a project.&lt;/a&gt; It is usually a file named &lt;code&gt;mvnw&lt;/code&gt;. &lt;strong&gt;Its primary purpose is to ensure that anyone building the project uses the exact same version of Apache Maven, without needing to install Maven manually beforehand.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It comes with &lt;code&gt;.mvn/wrapper/maven-wrapper.properties&lt;/code&gt;, a configuration file specifying which version of Maven should be used and where to download it from (usually Maven Central).&lt;/p&gt;
&lt;p&gt;Instead of running &lt;code&gt;mvn &amp;lt;goal&amp;gt;&lt;/code&gt; (which uses the globally installed Maven, if any), users run &lt;code&gt;./mvnw &amp;lt;goal&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="intellij-idea-ultimate"&gt;IntelliJ IDEA Ultimate&lt;/h1&gt;
&lt;p&gt;Although technically any IDE with the right extensions will do, it's recommended to use IntelliJ IDEA Ultimate. There is also the Community Edition that is completely free to use.&lt;/p&gt;
&lt;p&gt;Kotlin is included in all IntelliJ IDEA versions and releases.&lt;/p&gt;
&lt;h2 id="install"&gt;Install&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/toolbox-app/"&gt;Download Jetbrains' Toolbox App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Extract &lt;code&gt;jetbrains-toolbox&lt;/code&gt; from the archive and move it under &lt;code&gt;~/.local/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launch it. From there you can install IntelliJ Ultimate.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="setup-intellij"&gt;Setup IntelliJ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Settings &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Maven &amp;gt; Importing &amp;gt; Automatically download&lt;/code&gt;. Check the 3 checkboxes "Sources", "Documentation" and "Annotations".&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Settings &amp;gt; Editor &amp;gt; General &amp;gt; Auto Import&lt;/code&gt;, check &lt;code&gt;Add unambiguous imports on the fly&lt;/code&gt; and &lt;code&gt;Optimize imports on the fly&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Settings &amp;gt; Editor &amp;gt; Tools &amp;gt; Actions on Save&lt;/code&gt;, check &lt;code&gt;Reformat code&lt;/code&gt;, &lt;code&gt;Optimize imports&lt;/code&gt;, &lt;code&gt;Rearrange code&lt;/code&gt; and &lt;code&gt;Run code cleanup&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="plugins"&gt;Plugins&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Plugins&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SonarQube for IDE&lt;/code&gt; for code quality checks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GitHub Copilot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[GitToolBox](https://plugins.jetbrains.com/plugin/7499-gittoolbox)&lt;/code&gt; for git blame on lines&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="common-shortcuts-as-of-april-2025"&gt;Common shortcuts (as of April 2025)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Alt+Enter&lt;/code&gt;&lt;/strong&gt;: Show Intention Actions &amp;amp; Quick Fixes. This is arguably the most crucial shortcut. It offers context-aware suggestions, from fixing errors and warnings to importing classes, generating code, and applying quick refactorings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Double Shift&lt;/code&gt;&lt;/strong&gt;: Search Everywhere. Quickly find files, classes, symbols, actions, settings, or even Git commits anywhere in your project or the IDE itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Alt+J&lt;/code&gt;&lt;/strong&gt;: Equivalent of &lt;code&gt;Ctrl+D&lt;/code&gt; in VS Code ("Add Selection for Next Occurrence").&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Shift+A&lt;/code&gt;&lt;/strong&gt;: Find Action. If you know the name of an action (like "Reformat Code" or "Toggle Case") but not the shortcut, use this to find and execute it. It also shows the shortcut if one exists.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+B&lt;/code&gt; or &lt;code&gt;Ctrl+Click&lt;/code&gt;&lt;/strong&gt;: Go to Declaration or Usages. Navigate to the source declaration of a variable, method, or class. If used on the declaration itself, it finds usages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Alt+F7&lt;/code&gt;&lt;/strong&gt;: Find Usages. Shows all places where the symbol under the caret is used throughout the project in the Find tool window.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Alt+L&lt;/code&gt;&lt;/strong&gt;: Reformat Code. Automatically formats the current file or selected code block according to your project's code style settings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+/&lt;/code&gt;&lt;/strong&gt;: Comment/Uncomment with Line Comment. Quickly comment or uncomment the current line or selected block using single-line comments (&lt;code&gt;//&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Shift+/&lt;/code&gt;&lt;/strong&gt;: Comment/Uncomment with Block Comment. Comment or uncomment the selected block using block comments (&lt;code&gt;/* ... */&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+W&lt;/code&gt; / &lt;code&gt;Ctrl+Shift+W&lt;/code&gt;&lt;/strong&gt;: Extend / Shrink Selection. Intelligently selects increasingly larger logical blocks of code (or shrinks the selection). Very useful for selecting statements, methods, or classes without using the mouse.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+D&lt;/code&gt;&lt;/strong&gt;: Duplicate Line or Selection. Copies the current line (or selected block) and pastes it immediately below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Y&lt;/code&gt;&lt;/strong&gt;: Delete Line. Deletes the entire line where the caret is positioned.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Shift+F6&lt;/code&gt;&lt;/strong&gt;: Rename Refactoring. Safely rename variables, methods, classes, files, etc., updating all usages across the project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Alt+M&lt;/code&gt;&lt;/strong&gt;: Extract Method Refactoring. Turns a selected block of code into a new method.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Alt+V&lt;/code&gt;&lt;/strong&gt;: Extract Variable Refactoring. Creates a new variable from a selected expression.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+E&lt;/code&gt;&lt;/strong&gt;: Recent Files. Shows a popup list of recently opened files for quick navigation. Press &lt;code&gt;Ctrl+E&lt;/code&gt; again to see only recently &lt;em&gt;changed&lt;/em&gt; files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+N&lt;/code&gt;&lt;/strong&gt;: Go to Class. Quickly navigate to any class definition by typing its name (CamelHumps matching works).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Shift+N&lt;/code&gt;&lt;/strong&gt;: Go to File. Quickly navigate to any file (not just classes) by typing its name.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Shift+F10&lt;/code&gt;&lt;/strong&gt;: Run. Executes the current run/debug configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Shift+F9&lt;/code&gt;&lt;/strong&gt;: Debug. Starts debugging the current run/debug configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Alt+1&lt;/code&gt;&lt;/strong&gt;: Toggle Project Tool Window. Shows or hides the Project view panel, typically used for navigating the file tree. &lt;code&gt;Esc&lt;/code&gt; usually returns focus to the editor from a tool window.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; These shortcuts are based on the default Linux keymap in IntelliJ IDEA. You can customize these shortcuts in &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Keymap&lt;/code&gt;. Some shortcuts might conflict with global OS shortcuts (especially on certain Linux distributions); IntelliJ usually warns you about this and provides options to resolve conflicts.&lt;/p&gt;
&lt;h3 id="github-copilot-shortcuts"&gt;GitHub Copilot shortcuts&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/strong&gt;: Accept the current inline suggestion. This is the primary way to insert the code Copilot suggests.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Esc&lt;/code&gt;&lt;/strong&gt;: Dismiss the current inline suggestion. Use this if you don't want the suggestion and want to keep typing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Alt+]&lt;/code&gt;&lt;/strong&gt;: Show the next inline suggestion. Cycles forward through alternative suggestions if Copilot has more than one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Alt+[&lt;/code&gt;&lt;/strong&gt;: Show the previous inline suggestion. Cycles backward through alternative suggestions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Alt+\&lt;/code&gt;&lt;/strong&gt;: Trigger inline suggestion manually. If Copilot hasn't automatically shown a suggestion, or you dismissed one, this asks Copilot to provide one based on the current context. &lt;em&gt;Note: This shortcut might conflict with other IntelliJ or OS shortcuts and may need rebinding.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Right Arrow&lt;/code&gt;&lt;/strong&gt;: Accept the next word of the suggestion. Useful for accepting suggestions incrementally.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Ctrl+Enter&lt;/code&gt;&lt;/strong&gt; (or sometimes &lt;strong&gt;&lt;code&gt;Alt+Enter&lt;/code&gt;&lt;/strong&gt; - check your keymap): Open GitHub Copilot panel/tool window. Shows multiple suggestions (often up to 10) in a separate panel for comparison. &lt;em&gt;Note: &lt;code&gt;Alt+Enter&lt;/code&gt; is the default for IntelliJ's "Show Intention Actions", so &lt;code&gt;Ctrl+Enter&lt;/code&gt; might be the more likely default for this specific Copilot action, but it's best to verify in your Keymap settings under the action typically named &lt;code&gt;Open GitHub Copilot&lt;/code&gt; or similar.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Code"></category><category term="kotlin"></category><category term="java"></category><category term="code"></category></entry><entry><title>Keys to efficient i18n</title><link href="https://romainpellerin.eu/keys-to-efficient-i18n.html" rel="alternate"></link><published>2021-12-16T12:00:00+01:00</published><updated>2022-09-24T12:11:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2021-12-16:/keys-to-efficient-i18n.html</id><summary type="html">&lt;p&gt;2021 marked a big milestone for the Doctolib engineering teams. Our 8-year-old codebase and products finally switched from French to…&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://romainpellerin.medium.com/keys-to-efficient-i18n-ec38fd461d7d"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;2021 marked a big milestone for the Doctolib engineering teams. Our 8-year-old codebase and products finally switched from French to English as a default language/locale.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As Doctolib is not present in any English speaking country, we don't have region-specific locales such as en-GB or en-US, nor do we have multiple French, German or Italian locales. We therefore in the rest of this article use the terms&lt;/em&gt; &lt;strong&gt;&lt;em&gt;locale&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;and&lt;/em&gt; &lt;strong&gt;&lt;em&gt;language&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;interchangeably. Localization (formatting of dates, currency, the change of language) and translation in Ruby on Rails are the same process. Only in the front end does localization require extra setting of some packages like &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt; or &lt;a href="https://day.js.org/"&gt;Day.js&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It was not an easy move. But we did it for multiple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our products are used by health practitioners and patients in France, Germany and Italy. Whenever a translation would go missing or not be translated in time, defaulting to French on the production website was not making much sense.&lt;/li&gt;
&lt;li&gt;While 3 years ago, almost all of our developers were French (or at least French-speaking), this is not true anymore. We have people coming from more than 40 countries and our tech centers are established in three different European countries. Writing tests in French by default was slowing everybody down. Using the development environment in English was difficult, and not an option known to many developers. In reality it should have been the default option.&lt;/li&gt;
&lt;li&gt;We wanted to make our translation process homogeneous for all countries. In doing so, we addressed problems only the German and Italian teams had been experiencing in the past, such as the delay between merging a pull request and having the translations available in production, or the fact that tests would occasionally fail because of new or changed translations. Specifically, tests testing features only available outside of France but asserting texts in French. When the German or Italian translations would eventually make it to the codebase, those tests would break. We therefore decided all tests now had to be written in English, unless testing a feature only available in one country.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the whys out of the way, let's now see tips and tricks we've learned — sometimes the hard way.&lt;/p&gt;
&lt;h1 id="tools-are-your-friends-leverage-them"&gt;Tools are your friends, leverage them&lt;/h1&gt;
&lt;p&gt;Dependencies-wise, we use &lt;a href="https://github.com/ruby-i18n/i18n"&gt;the default Rails gem&lt;/a&gt; to localize our app on the back end, and we use &lt;a href="https://www.npmjs.com/package/i18n-js"&gt;i18n-js&lt;/a&gt; on the front end.&lt;/p&gt;
&lt;p&gt;In most applications, localization is done through YAML files. For instance, a &lt;code&gt;en.yml&lt;/code&gt; file might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Welcome to my website&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;menu_options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Log in&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Log out&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;users_connected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;No users connected&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;one&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;One user connected&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%{count}&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;users&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;connected&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We refer to full-path YAML keys as "i18n keys". For instance, &lt;code&gt;en.menu_options.login&lt;/code&gt; is a full-path YAML key, although the first key in the hierarchy (&lt;code&gt;en&lt;/code&gt; as in "English", the language) is generally omitted when talking about i18n keys. We refer to the values as "translations". Here, we have an English translation for each key.&lt;/p&gt;
&lt;p&gt;We use &lt;a href="https://phrase.com/"&gt;Phrase&lt;/a&gt; to manage our translations. In Phrase, translations are identified by "i18n key + locale", and alongside their translation string also have two different attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;translated&lt;/em&gt;: &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Indicates whether a given key has been translated in a specific locale. If &lt;code&gt;false&lt;/code&gt;, it means the translation is an empty string.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;verified&lt;/em&gt;: &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Indicates whether the existing translation for this couple key+locale was marked as verified or not. It other words, it tells you whether a human approved this translation in Phrase or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Phrase can be used through their editor on the website, through &lt;a href="https://phrase.com/cli/"&gt;their CLI&lt;/a&gt;, or through &lt;a href="https://developers.phrase.com/api/"&gt;their API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At Doctolib, every commit to the &lt;code&gt;master&lt;/code&gt; branch leads to our file &lt;code&gt;en.yml&lt;/code&gt; being uploaded to Phrase. This way, we keep our English translations and our keys in sync with Phrase at all times.&lt;/p&gt;
&lt;p&gt;We've set Phrase up so that any new i18n key pushed to Phrase automatically creates the French, German and Italian translations based on the uploaded English translation. This is what they call &lt;a href="https://help.phrase.com/help/machine-translation"&gt;Machine Translation&lt;/a&gt;. It's like Google Translate, but automated. It saves us a lot of time. Then, our UX writers only have to review the translations, correct them if necessary, and mark them as verified.&lt;/p&gt;
&lt;p&gt;Phrase is a great tool with many options, that can be configured either in the website or in &lt;code&gt;.phraseapp.yml&lt;/code&gt;. After trying different settings for a while, here is what we found to work best for us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;phraseapp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;project_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;file_format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./config/locales/en.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;params&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;locale_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;en&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;file_format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;skip_upload_tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;update_translations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;skip_unverification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./config/locales/fr.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;params&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;locale_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;fr&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;include_empty_translations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;exclude_empty_zero_forms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;include_unverified_translations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Here, same configuration for de.yml and it.yml&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;include_unverified_translations: false&lt;/code&gt; makes sure only human-verified translations are downloaded when we run &lt;code&gt;phrase_cli pull&lt;/code&gt; . This is critical as we don't want machine translated translations to make it to production without any human review, as the translation has oftentimes to be context dependent.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;skip_unverification: true&lt;/code&gt; makes sure than any edits to an English translation does not unverify (i.e. mark as "not verified") the corresponding FR/DE/IT translations. This may sound counter-intuitive as it means that updates to English translations are not reflected in the other languages as long as no one updates the translations. But it actually allow us to keep our current translations in production. Because of the above-mentioned setting (&lt;code&gt;include_unverified_translations: false)&lt;/code&gt; , if we were to mark our translations as unverified, they would actually be removed when we next run &lt;code&gt;phrase_cli pull&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://help.phrase.com/help/working-with-pluralization"&gt;Pluralization is done through special keys.&lt;/a&gt; The most common ones are &lt;code&gt;zero&lt;/code&gt; , &lt;code&gt;one&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;, as shown in the example file above. All plural forms are optional, meaning we can provide as many as we want. While some plural forms might be the same in a given language, they might all differ in another one. To make translating in other languages in the Phrase editor easier, we've decided to always provide the &lt;code&gt;zero&lt;/code&gt; form, in addition to &lt;code&gt;one&lt;/code&gt; and &lt;code&gt;many&lt;/code&gt; in our &lt;code&gt;en.yml&lt;/code&gt; file. We enforce this through a static test. That's also why we also have &lt;code&gt;exclude_empty_zero_forms: true&lt;/code&gt; so that whenever the &lt;code&gt;zero&lt;/code&gt; form is the same as &lt;code&gt;other&lt;/code&gt;, we can skip translating it in Phrase and therefore not clutter our &lt;code&gt;fr.yml&lt;/code&gt;, &lt;code&gt;de.yml&lt;/code&gt; and &lt;code&gt;it.yml&lt;/code&gt; files unnecessarily.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;include_empty_translations&lt;/code&gt; is required by Rails to work properly, as some translations need to remain explicitly empty, such as the ones that help Rails format numbers.&lt;/p&gt;
&lt;h1 id="keeping-phrase-up-to-date"&gt;Keeping Phrase up-to-date&lt;/h1&gt;
&lt;p&gt;We strive to keep the number of unverified translations as low as possible, because any unverified translation is a translation that is not in production.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/keys-to-efficient-i18n/phrase-editor.png" alt="A screenshot of the Phrase editor" /&gt;
&lt;figcaption&gt;The Phrase web editor tells you how many unverified translations you have&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Since we just launched Doctolib in Italy, we have a little less than 10% of our i18n keys not yet available in Italian, as we are slowly catching up. Regarding the 163 unverified German translations, those are for features not used in Germany at the moment. But we’re nonetheless in the process of verifying them, because first of all these features might someday become available in Germany, and also German-speaking developers might want to use the German language while working on French or Italian features.&lt;/p&gt;
&lt;h1 id="string-interpolation-is-often-a-bad-idea"&gt;String interpolation is often a bad idea&lt;/h1&gt;
&lt;p&gt;While we were doing the switch from French to English, we realized at some point that we had a ton of unused keys in &lt;code&gt;en.yml&lt;/code&gt; . Keys from deleted features, keys from refactored code, etc. How to know which keys are actually used?&lt;/p&gt;
&lt;p&gt;We first try running &lt;code&gt;grep&lt;/code&gt; for every i18n key found in &lt;code&gt;en.yml&lt;/code&gt; across the entire codebase. But string interpolation made this impossible.&lt;/p&gt;
&lt;p&gt;What's string interpolation? There you go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doctor?&lt;/span&gt;
    &lt;span class="n"&gt;account_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;doctor&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;account_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;patient&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# many many lines further down...&lt;/span&gt;
&lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;common.account.&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;account_type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.greetings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doctor&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, it is near impossible to detect through &lt;code&gt;grep&lt;/code&gt; that both the keys &lt;code&gt;common.account.doctor.greetings&lt;/code&gt; and &lt;code&gt;common.account.patient.greetings&lt;/code&gt; are used. What's the solution? This:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doctor?&lt;/span&gt;
    &lt;span class="n"&gt;i18n_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;common.account.doctor.greetings&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;i18n_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;common.account.patient.greetings&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i18n_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To this day, we have not found a way (yet) to prevent string interpolation in i18n keys, but we're working on it. We've however communicated internally largely about it.&lt;/p&gt;
&lt;h1 id="the-same-locale-in-your-test-server-as-in-your-web-server-you-shall-set"&gt;The same locale in your test server as in your web server you shall set&lt;/h1&gt;
&lt;p&gt;When running integration tests with Ruby on Rails, &lt;a href="https://rspec.info/"&gt;RSpec&lt;/a&gt; and &lt;a href="https://github.com/teamcapybara/capybara"&gt;Capybara&lt;/a&gt;, there are actually two different servers being launched with every test. One is the test server, the one that executes assertions, pilots the browser, opens tabs, etc. And there's the web server, the one that responds to HTTP queries and renders your website.&lt;/p&gt;
&lt;p&gt;We've found that both servers do not necessarily answer the same to &lt;code&gt;I18n.locale&lt;/code&gt;. For instance, when writing tests for features only available in one country, we'd change the Top-Level Domain (TLD) to .fr, .de. or .it. This would, in turn, change the locale used in our web server through some business logic in our &lt;code&gt;ApplicationController.rb&lt;/code&gt;. But the test server would remain in English, regardless of the TLD.&lt;/p&gt;
&lt;p&gt;Consequently, trying &lt;code&gt;assert_text I18n.t("some.key")&lt;/code&gt; in a test of the French website would be looking for the English translation of &lt;code&gt;some.key&lt;/code&gt;, while only the French translation was to be found. Through some fine tuning of our subclasses of &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;, we have managed to sync the locale of both servers.&lt;/p&gt;
&lt;h1 id="preventing-the-creation-of-duplicate-keys-as-the-ruby-yaml-parser-silently-ignores-them-and-use-the-latest-defined-key"&gt;Preventing the creation of duplicate keys as the Ruby YAML parser silently ignores them and use the latest defined key&lt;/h1&gt;
&lt;p&gt;Say you have a &lt;code&gt;en.yml&lt;/code&gt; file as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;en&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Hello&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;bye&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Good bye&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;good_evening&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Good evening&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;bye&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Bye&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What does &lt;code&gt;I18n.t("greetings.bye")&lt;/code&gt; returns? Yep, &lt;code&gt;"Bye"&lt;/code&gt;. Why? Because the Ruby YAML parser used under the hood silently overwrites any already defined key.&lt;/p&gt;
&lt;p&gt;We added a test that is greatly inspired &lt;a href="https://stackoverflow.com/a/55705853/2105309"&gt;by this StackOverlow answer,&lt;/a&gt; to make sure we do not have duplicated i18n keys. The risk was, we could be breaking an untested feature by unknowingly overwriting an existing translation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;makes sure we have no duplicated key&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;yaml_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;config/locales/en.yml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PhraseHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;duplicate_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yaml_file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="enforcing-a-simple-format-for-keys"&gt;Enforcing a simple format for keys&lt;/h1&gt;
&lt;p&gt;Although many characters are permitted for keys (only the dot is not, as it marks levels in the hierarchy), we found it much easier to only deal with keys using only basic characters, such as the regular ASCII letters, upper or lower case, digits, hyphens and underscores. Why is that? First of all, because it's more readable, and second of all because it makes grepping through the codebase with regular expressions a lot easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enforces a simple format for keys&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;wrongly_formatted_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="no"&gt;PhraseHelper&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phrase_keys&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grep_v&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;%r{^[A-Za-z0-9_-]+(\.[A-Za-z0-9_-]+)*$}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grep_v&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^i18n\.transliterate\.rule\.[ÄäéöÖßüÜ€]$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# These keys are special on purpose, exclude them&lt;/span&gt;

    &lt;span class="n"&gt;assert_empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;wrongly_formatted_keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Please keep translation keys as simple as possible: &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;digits, lowercase letters, hyphens and underscores only&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="preventing-the-insertion-of-hidden-characters-whose-behavior-might-be-unexpected"&gt;Preventing the insertion of hidden characters whose behavior might be unexpected&lt;/h1&gt;
&lt;p&gt;Have you ever seen this warning message on GitHub?&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/keys-to-efficient-i18n/github-warning.png" alt="A warning message on GitHub" /&gt;
&lt;figcaption&gt;GitHub warning you about bidirectional Unicode text&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Well, we have. And many times. This happens when people using the Phrase Editor, would mistakenly type special characters on their keyboard while trying to simply type letters with accents.&lt;/p&gt;
&lt;p&gt;To prevent this from happening again and again, we've added a test. This way, whenever we pull the latest translations from Phrase and open a Pull Request to merge them, we can know right away if something is wrong with any translation.&lt;/p&gt;
&lt;p&gt;Here, a screenshot of the test. It's a screenshot as one would not be able to see the hidden Unicode characters otherwise.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/keys-to-efficient-i18n/test-screenshot.png" alt="A screenshot of a Ruby test" /&gt;
&lt;figcaption&gt;A test making sure our translation files do not contain special hidden Unicode characters&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id="avoid-duplicate-translations-at-the-same-node-level"&gt;Avoid duplicate translations at the same node level&lt;/h1&gt;
&lt;p&gt;Why create a new translation when one can reuse an existing one? Especially if the translation is a sibling (i.e at the same node level in the YAML file) of the one you're trying to add. Well again, we've added a test so that we avoid duplicating existing English translations. Because we've found that, since the translations YAML files tend to be very big, it is easy to overlook and miss a translation you're looking for, think it does not exist, and add it again.&lt;/p&gt;
&lt;h1 id="ensuring-the-file-is-correctly-formatted-at-all-times"&gt;Ensuring the file is correctly formatted at all times&lt;/h1&gt;
&lt;p&gt;Because throughout our journey of switching to English as a default locale, we've had to edit our &lt;code&gt;en.yml&lt;/code&gt; file many times, we've found that enforcing the formatting makes &lt;code&gt;git diff&lt;/code&gt;s easier to review. It's like when one starts using &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; and stops caring about how to format their JavaScript code. All of a sudden, single quotes, double quotes, escaping characters, where to break a line, etc, are no longer problems.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;makes sure en.yml is correctly formatted&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;config/locales/en.yml&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;formatted_yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_yaml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;indentation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_yaml&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class="dl"&gt;MESSAGE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="sh"&gt;    The #{file} file is not correctly formatted.&lt;/span&gt;
&lt;span class="sh"&gt;    Please put a binding.pry at the end of this test, run it, and launch:&lt;/span&gt;
&lt;span class="sh"&gt;        File.write(&amp;#39;#{file}&amp;#39;, formatted_yaml)&lt;/span&gt;
&lt;span class="dl"&gt;MESSAGE&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="finding-unused-keys-and-removing-them"&gt;Finding unused keys and removing them&lt;/h1&gt;
&lt;p&gt;That's the trickiest part. And unfortunately, we don't have a universal answer to that problem. But before finding which keys are not used, how do we even find the ones actually used?&lt;/p&gt;
&lt;p&gt;As we've seen before, string interpolation makes it impossible to statically find all used keys. We need to come up with something dynamic.&lt;/p&gt;
&lt;p&gt;Logging that a given i18n key is used at runtime is fairly simple, code-wise. "All we have to do" is monkey patch the Ruby gem or the JavaScript package so that we log or store somewhere which keys are being used. For instance, this is most of our JavaScript monkey patch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i18n-js&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addTranslationKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;actualKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;actualKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;actualKey&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_usedI18nKeys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i18n-keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_usedI18nKeys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;actualKey&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;actualKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i18n-keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;defaultOptionWasUsed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Do not track if we used a default&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;defaultOptionWasUsed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addTranslationKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Regarding our Ruby monkey patch, we've come up with something similar, except that we store the used keys in Redis.&lt;/p&gt;
&lt;p&gt;Now that we know how to track the used keys, when do we track them? Two options present themselves:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We keep a record of the ones used in production&lt;/li&gt;
&lt;li&gt;We keep a record of the ones used in tests (on the CI pipeline for instance)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The second option has the disadvantage of not being a 100% reliable. First, because we don't necessarily have a test for each and every feature of Doctolib, and second because even though we might, not all possible usage scenario for a given feature are tested, therefore we can't be sure that all the i18n keys would actually be used even once.&lt;/p&gt;
&lt;p&gt;The first option has the disadvantage of using our users' local storage at their expense and using our production Redis instance for something else that a feature. And likewise, we can't be 100% sure all of our features are even used at all. Also, the keys used today might not be the same ones as tomorrow, because we constantly merge pull requests and rollout new code to production.&lt;/p&gt;
&lt;p&gt;Therefore, the idea of capturing a "snapshot" of the keys used at one point in time, without interfering with the production website, sounded like our best bet.&lt;/p&gt;
&lt;p&gt;We're now capable of doing that snapshot and computing a diff between our existing keys and the ones used, yet we still have to find a way of making sure we're not deleting keys that could still be used in production, but that are simply not part of a tested feature.&lt;/p&gt;
&lt;h1 id="removing-translations-as-the-source-language-keys-are-removed"&gt;Removing translations as the source language keys are removed&lt;/h1&gt;
&lt;p&gt;Finally, the last thing we had to deal with was, how do we remove from Phrase (and therefore the other YAML files) the i18n keys that we occasionally remove from &lt;code&gt;en.yml&lt;/code&gt;, for instance when we delete a feature?&lt;/p&gt;
&lt;p&gt;We came up with a script that runs at night, once a day, on the CI. It basically does a diff of all the i18n keys found in &lt;code&gt;fr.yml&lt;/code&gt;, &lt;code&gt;de.yml&lt;/code&gt; and &lt;code&gt;it.yml&lt;/code&gt; minus those from &lt;code&gt;en.yml&lt;/code&gt;. Then, though Phrase's API, it sequentially removes all the French/German/Italian translations for these keys from Phrase. In the next day, when our job than pulls translations from Phrase will run, all our YAML files will contain the same i18n keys.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That's it. This is how Doctolib switched from French as a default language to English. We hope this is helpful. Beyond the migration itself, we've learned a lot and were not only able to improve our translation process but also how features are internationalized, making our engineers' lives easier.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;If you want more technical news, follow our journey through our &lt;a href="https://doctolib.engineering/engineering-news-ruby-rails-react/"&gt;docto-tech-life newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And if you want to join us in scaling a high traffic website and transforming the healthcare system, we are hiring talented developers to grow our tech and product team in France, Germany and Italy, feel free to have a look at the &lt;a href="https://about.doctolib.com/jobs?department=Engineering"&gt;open positions&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="Code"></category><category term="localization"></category><category term="internationalization"></category><category term="i18n"></category><category term="l10n"></category></entry><entry><title>Waving Goodbye to Internet Explorer 11 in 2021</title><link href="https://romainpellerin.eu/waving-goodbye-to-internet-explorer-11-in-2021.html" rel="alternate"></link><published>2021-06-01T23:30:00+02:00</published><updated>2022-09-24T12:11:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2021-06-01:/waving-goodbye-to-internet-explorer-11-in-2021.html</id><summary type="html">&lt;p&gt;Two years ago, we published “Supporting Internet Explorer 11 in 2019”. This year, we are bidding farewell to it. But hold on a minute! What happened between then and now? Let me tell you the story of a difficult break up between Doctolib and Internet Explorer…&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/doctolib/waving-goodbye-to-internet-explorer-11-in-2021-b01a8c5c9864"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Two years ago, we published "&lt;a href="https://romainpellerin.eu/supporting-internet-explorer-11-in-2019.html"&gt;Supporting Internet Explorer 11 in 2019&lt;/a&gt;". This year, we are bidding farewell to it. But hold on a minute! What happened between then and now? Let me tell you the story of a difficult break up between Doctolib and Internet Explorer... (&lt;a href="https://www.theverge.com/2021/5/19/22443997/microsoft-internet-explorer-end-of-support-date"&gt;and we're not the only ones&lt;/a&gt; 🤫)&lt;/p&gt;
&lt;h1 id="motivations"&gt;Motivations&lt;/h1&gt;
&lt;p&gt;Back in 2019, a major motivation for us to stop supporting old browsers on the website healthcare professionals use to access our service was that we had two different pipelines to bundle JavaScript code: one was through Webpack and &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;, the other one through the &lt;a href="https://guides.rubyonrails.org/asset_pipeline.html"&gt;Ruby on Rails asset pipeline&lt;/a&gt; (also known as Sprockets). The good news is, last year we managed to get rid of Sprockets. Now, all of our JavaScript files go through Webpack. Therefore, we do not need to write ES5-compliant code anymore, we can write modern JavaScript everywhere in our mono-repository. However we still have to instruct Babel to transpile some packages that do not come pre-transpiled. And let's be honest, monitoring breaking changes as library authors release new versions is no fun at all.&lt;/p&gt;
&lt;p&gt;Our other motivations were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cost of maintaining additional integration tests running on old browsers. Back then we were using Browserstack, we since then moved to Lambdatest, because we found it to be more reliable and noticed less random test fails. But that still remains a pain to maintain. Not only does Lambdatest occasionally fail, but also some specific browser versions do not mingle well with &lt;a href="https://github.com/teamcapybara/capybara"&gt;Capybara&lt;/a&gt; (our test framework). For instance, we found that &lt;a href="https://rubydoc.info/github/jnicklas/capybara/Capybara/Node/Actions#click_link_or_button-instance_method"&gt;&lt;code&gt;click_on&lt;/code&gt;&lt;/a&gt; would consistently not work with Safari 13 in some pages.&lt;/li&gt;
&lt;li&gt;We still have occasional down incidents. One of the recent ones was due to &lt;code&gt;scrollTo&lt;/code&gt; being used with options, which is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo#browser_compatibility"&gt;not supported by Internet Explorer 11&lt;/a&gt;. And of course, Babel can't do anything about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These motivations are still valid to this day. On top of that, since 2019, we have developed new features and brought &lt;a href="https://info.doctolib.fr/blog/doctolib-adopte-le-chiffrement-de-bout-en-bout-nouvelle-etape-dans-la-securisation-des-donnees-de-sante/"&gt;end-to-end encryption everywhere in the app&lt;/a&gt;. Yet, some of these old browsers have limited support for some of the web APIs we are using. As a consequence, these users can not enjoy the complete feature set Doctolib has to offer, and they are unable to see encrypted documents (PDF documents for instance), as encryption/decryption is done in the browser. Therefore, at the beginning of this year, we initiated a new project that we like to call "Browser Upgrade Campaign: reborn".&lt;/p&gt;
&lt;h1 id="browser-upgrade-campaign-reborn"&gt;Browser Upgrade Campaign: reborn&lt;/h1&gt;
&lt;p&gt;Admittedly, our previous attempt at having our customers upgrade their browsers was a failure. We are trying to get it right this time. The timeline we laid out was as follows:&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/waving-goodbye-to-internet-explorer-11-in-2021/timeline.png" alt="The image of the timeline" /&gt;
&lt;figcaption&gt;Timeline of our new project to reduce the use of outdated browsers, over 2021&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Regarding the list of browsers we wanted to keep supporting, we kept the same list as in 2019, with one minor change: we would no longer support Edge 17. Here are the browsers we officially support from now on, on our pro website:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari 12+&lt;/li&gt;
&lt;li&gt;Edge 18+ (18 is the last non Chrome-based version of Edge)&lt;/li&gt;
&lt;li&gt;Chrome 50+&lt;/li&gt;
&lt;li&gt;Firefox 45+ (version 45 in an Extended Support Release)&lt;/li&gt;
&lt;li&gt;No Internet Explorer version at all&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Preventing the use of non supported browsers internally was an easy win. All it took was good communication and the flip of a switch. After that, any Doctolib employee trying to use an outdated browser would be welcomed by the following page:&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/waving-goodbye-to-internet-explorer-11-in-2021/page.png" alt="A screenshot of the page preventing the use of Doctolib" /&gt;
&lt;figcaption&gt;The page preventing people from using an outdated browser&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The two following steps were almost as easy. After setting up some tracking through New Relic, we realized we did not have that many new connections on outdated browsers every day. What's a new connection? It's a connection from a browser that never connected to Doctolib before. How do we determine whether it ever accessed Doctolib before? We look for existing cookies sent in the request.&lt;/p&gt;
&lt;p&gt;Based on that fact, we first blocked any new connection on Internet Explorer 11. Then, over the next few days, we monitored the amount of support tickets and phone calls: nothing. No one complained. We then did the same operation with other deprecated browsers.&lt;/p&gt;
&lt;p&gt;Then came the fourth step.&lt;/p&gt;
&lt;h1 id="walking-on-eggs"&gt;Walking on eggs&lt;/h1&gt;
&lt;p&gt;Given that there had been a red banner displayed at the top of Doctolib for the last two years to users surfing with outdated browsers, our users were well aware of that. But of course we knew it was not enough. Why would our graphs still show relatively high usage of outdated browsers, uh?&lt;/p&gt;
&lt;p&gt;In April and May we sent out two email campaigns: one to remote secretaryship centers, another one to key accounts (most of them being hospitals or Covid-19 vaccination centers). This time, unlike in 2019, we explicitly told them which users were still using non supported browsers and gave them a deadline after which we would no longer be able to use these browsers. We made sure to tell them which obsolete browsers they were using and what options they had to upgrade.&lt;/p&gt;
&lt;p&gt;In the meantime, we compiled a big list of user accounts that were using multiple browsers, both supported and non supported ones. Every day, we'd pick a bunch of them and enable a feature switch on their account, that would prevent them from logging in with a non supported browser. Once again, we daily monitored our support, making sure everything was going as smoothly as possible.&lt;/p&gt;
&lt;p&gt;And it finally happened for good this time: the curve went down and eventually reached zero.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/waving-goodbye-to-internet-explorer-11-in-2021/graph.png" alt="A graph showing the use of Internet Explorer over time" /&gt;
&lt;figcaption&gt;Use of Internet Explorer among healthcare professionals on Doctolib&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;After the feature switch had been flipped for all of our users seamlessly, we removed the feature switch and hardcoded these browsers' name and versions directly in the codebase, to make sure no one would ever use them again.&lt;/p&gt;
&lt;p&gt;This project is, as I am writing this article, coming to an end. Interestingly enough, in two years' time, our browser market share changed a lot, Internet Explorer slowing fading out into oblivion... and Microsoft Edge taking off!&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/waving-goodbye-to-internet-explorer-11-in-2021/market-share.png" alt="Browser market share over time" /&gt;
&lt;figcaption&gt;Browser market share on Doctolib pro&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;If you want more technical news, follow our journey through our &lt;a href="https://doctolib.engineering/engineering-news-ruby-rails-react/"&gt;docto-tech-life newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And if you want to join us in scaling a high traffic website and transforming the healthcare system, we are hiring talented developers to grow our tech and product team in France and Germany, feel free to have a look at the &lt;a href="https://about.doctolib.com/jobs?department=Engineering"&gt;open positions&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="Code"></category><category term="internet explorer"></category><category term="browsers"></category></entry><entry><title>Supporting Internet Explorer 11 in 2019</title><link href="https://romainpellerin.eu/supporting-internet-explorer-11-in-2019.html" rel="alternate"></link><published>2019-07-15T14:30:00+02:00</published><updated>2022-09-24T12:11:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2019-07-15:/supporting-internet-explorer-11-in-2019.html</id><summary type="html">&lt;p&gt;Following the recent publication of A Conspiracy To Kill IE6, we at Doctolib thought we’d in turn unveil our plan to stop supporting not only Internet Explorer 11 but also other outdated desktop…&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/doctolib/supporting-internet-explorer-11-in-2019-12dc1f1ebc3c"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Following the recent publication of &lt;a href="https://blog.chriszacharias.com/a-conspiracy-to-kill-ie6"&gt;A Conspiracy To Kill IE6&lt;/a&gt;, we &lt;a href="https://www.doctolib.com/"&gt;at Doctolib&lt;/a&gt; thought we’d in turn unveil our plan to stop supporting not only Internet Explorer 11 but also other outdated desktop browser versions, and help the world move towards a faster and more secure web. Everything that follows took place between March 2019 and July 2019.&lt;/p&gt;
&lt;p&gt;In late March 2019 Doctolib had over 80,000 paying customers. They are physicians and specialists working in private practices, hospitals, healthcare centers or even at home. They use all kinds of devices and browsers. Some devices are privately owned, some are provided by employers and some are even shared and used by many people throughout the day. As a consequence, it is impossible for us to predict with certainty what browsers our customers will use.&lt;/p&gt;
&lt;p&gt;Moreover, most public healthcare institutions (hospitals, for example) manage their computers like they do in schools or governments. All regular users are not administrators, they only have restricted permissions. They can’t install software or decide which browser they use. Upgrade-wise, their IT departments tend to update the OS and browsers every 1 to 2 years. Privacy is also a much bigger concern for most of them, so they usually favor Firefox over Chrome, and sometimes IE 11 or Edge for compatibility reasons. Last but not least, they’re big on Firefox Extended Support Release (ESR) versions (for a reason, &lt;a href="https://www.mozilla.org/en-US/firefox/organizations/"&gt;it comes with long term support&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In light of this, here’s what Doctolib’s browser market share looked like in March 2019.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/supporting-internet-explorer-11-in-2019/browsers-share.png" alt="Historical browser market share for Doctolib customers week by week" /&gt;
&lt;figcaption&gt;Historical browser market share for Doctolib customers week by week&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The graph shows unique browser connections per week. As one can see, Internet Explorer 11 users represent on average between 2.5 and 3.5% of all users. Among our Chrome and Firefox users, some users rely on outdated versions, sometimes more than 4-year-old versions. Same goes for Safari, with pretty stable curves not showing any signs of decline.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/supporting-internet-explorer-11-in-2019/safari.png" alt="Historical Safari browser market share for Doctolib customers day by day up until March 2019" /&gt;
&lt;figcaption&gt;Historical Safari browser market share for Doctolib customers day by day up until March 2019&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So what’s the big deal?&lt;/p&gt;
&lt;h1 id="cost-of-supporting-old-browsers"&gt;Cost of supporting old browsers&lt;/h1&gt;
&lt;p&gt;The more browsers a company decides to support, the more problems it brings. At Doctolib, we identified the following specific problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Old browsers only understand ECMAScript 5. Like most modern web applications, we have &lt;strong&gt;a lot&lt;/strong&gt; of JavaScript dependencies. Each dependency upgrade must be checked to make sure it doesn’t contain untranspiled code. &lt;strong&gt;That’s time wasted.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our app is built with Ruby on Rails and React. Our JavaScript code is bundled in two different ways, depending on the files and where in the app it runs: the &lt;a href="https://guides.rubyonrails.org/asset_pipeline.html"&gt;RoR asset pipeline&lt;/a&gt; or Webpack. The code processed by the asset pipeline does not go through Babel, as opposed to the one bundled by Webpack. Therefore we can’t write modern JavaScript in all our JavaScript files yet*. &lt;strong&gt;That’s time wasted writing and code reviewing old-fashioned JavaScript&lt;/strong&gt; *(we have a work-in-progress project for using Babel with RoR).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our 10,000+ integration tests are executed with the latest version of Chrome. Nonetheless, since we support multiple browsers, we also have a few simple additional integration tests that run on IE11 as well as outdated Edge, Firefox and Safari browsers. These extra tests &lt;strong&gt;cost time&lt;/strong&gt; (developers waiting for CI tests to complete) and &lt;strong&gt;money&lt;/strong&gt; (tests run time on Heroku). &lt;strong&gt;They also require extra maintenance.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last but far from least, we’ve had several &lt;strong&gt;production issues&lt;/strong&gt; in the last 6 months caused by untranspiled NPM dependencies not working in old browsers. That’s &lt;strong&gt;user dissatisfaction and time wasted for engineers&lt;/strong&gt;. Plus, each production issue is immediately followed by a detailed &lt;strong&gt;postmortem&lt;/strong&gt; which oftentimes means a full day of work for an engineer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a side note, supporting multiple browsers creates bigger JavaScript bundles because code transpiled through Babel is usually bigger and polyfills take space. It slightly increases compile time, bandwidth consumption, and JavaScript load/parse times.&lt;/p&gt;
&lt;p&gt;Knowing this, in a perfect world we’d only support the latest version of each browser, Internet Explorer 11 excluded of course. But that is not possible.&lt;/p&gt;
&lt;h1 id="limitations"&gt;Limitations&lt;/h1&gt;
&lt;p&gt;Why is it so hard to have all of our customers upgrade their browsers? Why can’t we just display a banner, or send them an email, threatening to drop support for outdated browsers, and eventually do it?&lt;/p&gt;
&lt;p&gt;Well, there are many good reasons. First, healthcare professionals are generally not computer savvy. Computers are a tool, a means to them, not an end. They don’t want to have to worry about upgrades or browser versions.&lt;/p&gt;
&lt;p&gt;Also, as written in the introductory paragraph, people working in health establishments have no control over what browser they run. Budget and time constraints prevent these organizations from providing their employees with the latest computers, or prevent them from upgrading software on a regular basis. Also, some organizations are more concerned about privacy than others and thus insist on running specific browsers. Finally, some organizations sometimes use Internet Explorer because they also use other websites which require ActiveX for instance.&lt;/p&gt;
&lt;p&gt;There are multiple valid reasons for running old and outdated browsers. And multiple reasons for being unable to upgrade regularly. That’s why we can’t just cut off access to these users overnight.&lt;/p&gt;
&lt;h1 id="master-plan-aka-conspiracy"&gt;Master Plan (aka Conspiracy)&lt;/h1&gt;
&lt;p&gt;To kickstart the move towards up-to-date browsers, in March 2019 we came up with a very detailed plan, spanning over several months. When the idea arose for this plan, we were supporting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari 6+&lt;/li&gt;
&lt;li&gt;All Edge browsers&lt;/li&gt;
&lt;li&gt;Chrome 50+&lt;/li&gt;
&lt;li&gt;Firefox 27+&lt;/li&gt;
&lt;li&gt;Internet Explorer 11&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ultimate goal is to support only the following browsers and publicly advertise about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Safari 12+&lt;/li&gt;
&lt;li&gt;Edge 17+&lt;/li&gt;
&lt;li&gt;Chrome 50+&lt;/li&gt;
&lt;li&gt;Firefox 45+ (version 45 in an ESR)&lt;/li&gt;
&lt;li&gt;No Internet Explorer version at all&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, we want users of unsupported browsers to be fully aware of that.&lt;/p&gt;
&lt;p&gt;How did we set this in motion?&lt;/p&gt;
&lt;p&gt;The whole plan is based on displaying a banner at the right time, to the right users, progressively over time. The banner explains that the browser is no longer supported and gives links to Chrome or Firefox upgrade help pages. The banner can be hidden for 5 days before appearing again.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/supporting-internet-explorer-11-in-2019/red-banner.png" alt="The top red banner we display on outdated browsers" /&gt;
&lt;figcaption&gt;The top red banner we display on outdated browsers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We started off with Safari. Why is that? Users who run Safari most likely run Mac and thus use their own device, meaning they’re admin. Public healthcare centers or hospitals never run Apple devices in France or Germany. Plus Safari users are less than 10% of our users, so we thought it’d be quick to have these users upgrade to a newer version of Safari, or switch to Chrome or Firefox. Over the month of April, once or twice a week we increased the minimum supported version of Safari until we reached 12 (the latest stable version at the time of writing). Every few days, a new batch of users would be shown the banner. First, Safari 6 users would see the banner, then three days later Safari 7 users would also, and so on, until all users of Safari 11 or below saw the banner.&lt;/p&gt;
&lt;p&gt;Over time, we could see the number of users for these unsupported versions significantly decreasing, while seeing Safari 12 slowly but surely rising. It did not work as well as expected though, some users probably don’t care too much about seeing a banner that can be closed anyway.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/supporting-internet-explorer-11-in-2019/safari-2.png" alt="Usage of unsupported Safari versions among Doctolib customers" /&gt;
&lt;figcaption&gt;Usage of unsupported Safari versions among Doctolib customers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Next we decided to tackle Firefox users. Here, we needed to be extra cautious since users in hospitals are unlikely to be able to upgrade their browsers. Therefore, to avoid impacting user experience, we decided to do it in two phases. First, we repeated what we had done for Safari users with Firefox users not working in hospitals: progressively increasing the minimum supported version until we reached 45. In the meantime, we sent emails to the hospitals, letting them know that in the coming few weeks we’d stop supporting old Firefox browsers. Only then we started showing them the banner, until all Firefox users below version 45 saw it.&lt;/p&gt;
&lt;p&gt;We repeated this process for Edge and Internet Explorer 11 afterwards. Eventually, when all unsupported browsers had the banner displayed, we decreased the time during which it could be hidden across page refreshes from 5 days to an hour.&lt;/p&gt;
&lt;p&gt;All along we closely monitored our usage share of web browsers through dashboards and eventually saw usage of all unwanted browsers go downwards, as we expected them to, although not as fast as we predicted.&lt;/p&gt;
&lt;p&gt;As it turned out, having our customers working in hospitals upgrade their browsers was much harder than we thought. People and organizations need time to adapt. It’s also our mission as a tech company providing an online service to educate our customers and explain why upgrading software is important.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/supporting-internet-explorer-11-in-2019/ie.png" alt="Usage of IE among Doctolib customers" /&gt;
&lt;figcaption&gt;Usage of IE among Doctolib customers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/supporting-internet-explorer-11-in-2019/firefox.png" alt="Usage of ESR Firefox versions among Doctolib customers" /&gt;
&lt;figcaption&gt;Usage of ESR Firefox versions among Doctolib customers&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Eventually, we reached all the goals we had in terms of browsers we officially support, even though there is a significant portion of our customers still using unsupported browsers. We’ve already committed to repeat this plan in a few months to try to get rid of Firefox browsers below version 50 and Chrome browsers below 60.&lt;/p&gt;
&lt;p&gt;What did this plan teach us? First of all, we can’t force users to upgrade their browsers. We can’t decide what they use. They have constraints of their own and we must take them into account. However, good communication and giving them time brings long lasting relationships and builds trust between us and our customers, which is a requirement if we want them to use the right tools.&lt;/p&gt;
&lt;p&gt;Also, such an ambitious plan cannot be executed overnight. Internal communication is key and all the relevant departments must be involved as soon as possible, e.g. Customer Service, Account Management, Tech, etc. It works best when everyone is aligned and knows what we are aiming for and why.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/doctolib/supporting-internet-explorer-11-in-2019-12dc1f1ebc3c"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="Code"></category><category term="internet explorer"></category><category term="browsers"></category></entry><entry><title>Regaining control over Doctolib.com frontend</title><link href="https://romainpellerin.eu/regaining-control-over-doctolib-com-frontend.html" rel="alternate"></link><published>2019-05-14T14:30:00+02:00</published><updated>2022-09-24T12:11:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2019-05-14:/regaining-control-over-doctolib-com-frontend.html</id><summary type="html">&lt;p&gt;Doctolib has been growing rapidly over the past 5 years, as has our code base. We have been able to deliver numerous features in a timely manner, but oftentimes at the expense of code legibility and…&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@romain.pellerin/regaining-control-over-doctolib-com-frontend-9ec8cc41037f"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Doctolib has been growing rapidly over the past 5 years, as has our code base. We have been able to deliver numerous features in a timely manner, but oftentimes at the expense of code legibility and simplicity. The year 2018 was for us an opportunity to step back, learn from our mistakes, and set goals in order for us to regain control over our frontend. Specifically, we re-defined &lt;a href="https://medium.com/doctolib/treating-technical-debt-62630ee64ef7"&gt;technical debt and legacy code&lt;/a&gt; and took measures to reduce it so that we could keep growing at an ever-faster rate and continue to ship features that practitioners and patients love.&lt;/p&gt;
&lt;h1 id="identifying-pain-points"&gt;Identifying pain points&lt;/h1&gt;
&lt;p&gt;Twice a year a team of people with a strong interest in JavaScript gather to discuss frontend at Doctolib. One person from each feature team is selected to join the meetings. Nevertheless, the meetings are also open to anyone, as long as they express an interest and have proved themselves to be proficient in JavaScript.&lt;/p&gt;
&lt;p&gt;In advance of these meetings, we circulate email surveys to all of the software engineers to identify their specific issues and struggles. Below is an extract from the latest survey we sent out in November 2018:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What is your biggest pain point on the frontend stack?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;What elements are holding you back? What prevents you from being more effective?&lt;/li&gt;
&lt;li&gt;Is there anything you don’t understand/you don’t master? RxJS, recompact, react-form? React context, HOC, …?&lt;/li&gt;
&lt;li&gt;Is the directory structure good enough? Does it make sense?&lt;/li&gt;
&lt;li&gt;Any tool-related problems? (Prettier, IDE, Chrome DevTools)&lt;/li&gt;
&lt;li&gt;Apart from &lt;code&gt;console.log&lt;/code&gt;, how do you debug?&lt;/li&gt;
&lt;li&gt;Do you know Jest? Do you know how to write JavaScript unit tests?&lt;/li&gt;
&lt;li&gt;Do you know what React components we have? Do you know how to use them and what props they expect?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These simple, short questionnaires allow us to gather valuable feedback from all of the engineers. Using them, we are able to identify the most-cited problems and define what legacy means at Doctolib during our bi-annual meetings.&lt;/p&gt;
&lt;p&gt;After analyzing the results of these surveys, we usually come up with a new direction and a list of tasks for the following two quarters. These actions are then shared with the rest of the engineers during an all-hands meeting with the entire tech team.&lt;/p&gt;
&lt;h1 id="what-is-legacy-code-at-doctolib-in-2018"&gt;What is legacy code at Doctolib in 2018?&lt;/h1&gt;
&lt;h2 id="rxjs"&gt;RxJS&lt;/h2&gt;
&lt;p&gt;When Doctolib was in its early stages, state management for React apps was still very experimental and there was no consensus about which way to go. Two emerging libraries were becoming fashionable: Redux and RxJS. The decision was made to pick RxJS, but it could have just as well been Redux.&lt;/p&gt;
&lt;p&gt;Over time, RxJS usage grew and the library was soon imported into every file and used for just about anything and everything: app state management, tiny component states, forms, buttons, AJAX requests, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is this legacy now?&lt;/strong&gt; Well, first of all, RxJS is not entirely legacy but the way it’s being used at Doctolib is. This is mostly because it has been used for everything, although &lt;a href="https://xgrommx.github.io/rx-book/content/guidelines/when/index.html"&gt;its use cases are normally meant to be very specific and restricted&lt;/a&gt;. RxJS also makes unit testing difficult because Observables need to be mocked-up. &lt;a href="https://xgrommx.github.io/rx-book/content/guidelines/when/index.html"&gt;Reactive programming is not known by many&lt;/a&gt;, as indicated on the graph below, therefore it does not help shorten new joiners’ ramp-up time — quite the opposite, to be honest. Our aim is to restrain its use cases to what it was originally intended to be used for: event-based computations and asynchronous sequences of data.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/regaining-control-over-doctolib-com-frontend/rxjs-graph.png" alt="Graph showing RxJS popularity" /&gt;
&lt;figcaption&gt;RxJS ranks last among the “other” JavaScript libraries in 2018 &lt;a target="_blank" href="https://2018.stateofjs.com/front-end-frameworks/other-libraries/"&gt;[Source]&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id="recomposerecompact"&gt;Recompose/Recompact&lt;/h2&gt;
&lt;p&gt;At the same time as RxJS was released, another helper library came out: &lt;a href="https://github.com/acdlite/recompose"&gt;recompose&lt;/a&gt;. As recompose was not meeting all of our needs, the project was forked, patched, and renamed as &lt;a href="https://github.com/neoziro/recompact"&gt;recompact&lt;/a&gt;. Once again, it quickly spread across the code base, bringing Higher Order Components everywhere, as well as additional complexity for new joiners.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is this legacy now?&lt;/strong&gt; Most helpers from recompact can be written in vanilla React (recompact.pure or recompact.withProps to name a few). Given that early advocates of recompact at Doctolib left the company a while ago, it became challenging to pass down knowledge and help new joiners get up to speed quickly. Moreover, the original library (recompose) was recently officially &lt;a href="https://github.com/acdlite/recompose#a-note-from-the-author-acdlite-oct-25-2018"&gt;deprecated&lt;/a&gt; because of an upcoming React feature, &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Hooks&lt;/a&gt;, not forgetting that recompose/recompact rely on the legacy React Context API. We now aim at getting rid of recompact altogether.&lt;/p&gt;
&lt;h2 id="jquery-and-coffeescript"&gt;jQuery and CoffeeScript&lt;/h2&gt;
&lt;p&gt;Since the very beginning, jQuery and CoffeeScript have been lying around in the code base. jQuery helped features come to life in no time, bridging the gap between various browsers, oftentimes with poor support for new Web APIs. As for CoffeeScript, it is tightly coupled with Ruby on Rails, our backend, thus it has been there from the beginning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is this legacy now?&lt;/strong&gt; Starting this year, we only support modern browsers and Internet Explorer 11. Consequently, it does not make any sense to use jQuery when we can write plain JavaScript; and CoffeeScript adds unneeded complexity given that very few people can understand it at a glance, let alone write it.&lt;/p&gt;
&lt;h2 id="react-unsafe-life-cycle-methods"&gt;React unsafe life-cycle methods&lt;/h2&gt;
&lt;p&gt;Last but not least, we recently deprecated a few React life-cycle methods and helpers, following the maintainers’ advice about unsafe methods. &lt;a href="https://reactjs.org/docs/strict-mode.html"&gt;React.StrictMode was recently introduced&lt;/a&gt; as a tool to help detect potential issues within an app. We cautiously started adding it in the codebase, to avoid having too many warnings popping up here and there while developing. Here is the list of life-cycle methods or helpers we decided to deprecate early in our codebase: &lt;em&gt;componentWillMount&lt;/em&gt;, &lt;em&gt;componentWillReceiveProps&lt;/em&gt;, &lt;em&gt;componentWillUpdate&lt;/em&gt; and &lt;em&gt;findDOMNode&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id="tackling-and-killing-legacy"&gt;Tackling and killing legacy&lt;/h1&gt;
&lt;p&gt;After agreeing upon what can be defined as legacy, the time comes to actually kill it. The way frontend legacy is handled at Doctolib is always the same; we pretty much stick to &lt;a href="https://medium.com/@addyosmani/measure-optimize-monitor-33e36108e014"&gt;MOM&lt;/a&gt;: &lt;em&gt;Measure, Optimize and Monitor&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Measuring&lt;/em&gt;&lt;/strong&gt; is done by way of our survey and our own experience while developing. While evaluating the relevance of each pain point collected, we prioritize them according to the number of times they are mentioned. We also assess the feasibility over the short-term: short and easy tasks tend to move up on the list of actions. Finally, these actions become Tech Tasks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Optimizing&lt;/em&gt;&lt;/strong&gt; is done progressively, after our bi-annual meetings, through special tasks we call &lt;strong&gt;Tech Tasks&lt;/strong&gt;. These tasks are differentiated from regular feature tasks by their very own nature: they are purely technical tasks whose goal is to improve platform stability, security, and performance as well as to reduce technical debt. People usually pick the ones they like best when they work on Tech Tasks (Fridays are Tech Tasks days for most feature teams). However, a few big and/or complex tasks do get assigned during our bi-annual meeting in order to make sure that they will eventually be carried out. These big tasks are prioritized by the solution architects and engineering managers on a regular basis to ensure they fit into the roadmap.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;&lt;em&gt;monitoring&lt;/em&gt;&lt;/strong&gt; is done throughout. It is a never-ending process. At the end of every meeting, we set KPIs to “track” and then we immediately create dashboards to track usage of “legacy” through these KPIs. One person is in charge of creating these graphs, usually the same person who called a meeting in the first place. Basically, this translates to metrics we expect to drop.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/regaining-control-over-doctolib-com-frontend/recompact.png" alt="Recompact monitoring graphs" /&gt;
&lt;figcaption&gt;3 out of the many graphs we use to monitor recompact usage&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;These three graphs above show the number of lines in our code base containing a deprecated function. This is how we compute these numbers:&lt;/p&gt;
&lt;script src="https://gist.github.com/rpellerin/6488f5f4bf893a8555a3261ddf2d0856.js"&gt;&lt;/script&gt;

&lt;p&gt;We also create less-specific dashboards which list the “general” legacy functions and libraries we aim at reducing or killing altogether.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/regaining-control-over-doctolib-com-frontend/general-legacy.png" alt="Other monitoring graphs" /&gt;
&lt;figcaption&gt;Everything that is considered legacy is shown on this graph&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;These graphs are a helpful starting point from which we can monitor progress.&lt;/p&gt;
&lt;h2 id="preventing-people-from-using-it"&gt;Preventing people from using it&lt;/h2&gt;
&lt;p&gt;There is a long-lasting tradition of heavily relying on static checks at Doctolib. Essentially, they are script files which we run on source code as it is — before transpilation and bundling. Our CI pipeline runs these tests first, before running any of our 8000+ end-to-end tests. Below is the one test which checks for new lines containing deprecated React methods and recompact helpers, and then reports on Pull Requests.&lt;/p&gt;
&lt;script src="https://gist.github.com/rpellerin/2521a2dd9e9a0c6cd993755441fffcea.js"&gt;&lt;/script&gt;

&lt;p&gt;In addition to relying on static checks, we also regularly inform and remind people about our best practices on the frontend stack. We usually demo state-of-the-art JavaScript once a month, during what we call “Tech Time” — a meeting for and by software engineers. It’s also a good opportunity to show how much progress is being made on reducing legacy code.&lt;/p&gt;
&lt;h2 id="meeting-objectives"&gt;Meeting objectives&lt;/h2&gt;
&lt;p&gt;Oftentimes, the long tasks tend to remain “&lt;em&gt;in progress&lt;/em&gt;” forever and people lose interest in them. This is when the people who first defined these objectives come into play. It is their responsibility to help these tasks reach a conclusion by supporting those working on it and providing a helping hand if need be.&lt;/p&gt;
&lt;p&gt;In any case, every bi-annual meeting starts off with a review of what has been achieved during the previous term and carries on from there.&lt;/p&gt;
&lt;h1 id="long-term-vision"&gt;Long-term vision&lt;/h1&gt;
&lt;p&gt;Deprecating these few React functions, recompact, a significant part of our RxJS usage, jQuery, and CoffeeScript is a major first step. By doing so we can ease new joiners’ onboarding, keep up with the latest JavaScript standards, and reduce our technical debt. It also belongs to a bigger picture. Creating these dashboards opens the door to more monitoring, which ultimately means more control. A recent concrete example is the bundle size dashboard, which we introduced a few weeks ago.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/regaining-control-over-doctolib-com-frontend/bundle-sizes.png" alt="Bundle sizes graphs" /&gt;
&lt;figcaption&gt;This dashboards tracks our bundles sizes over time&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Not only does it store the sizes over time but it also reports on Github Pull Requests. &lt;a href="https://www.npmjs.com/package/bundlesize"&gt;A handy npm package called bundlesize&lt;/a&gt; checks that every build does not exceed thresholds defined in our package.json file.&lt;/p&gt;
&lt;figure class="center"&gt;
&lt;img src="https://romainpellerin.eu/images/regaining-control-over-doctolib-com-frontend/github-pr-checks.png" alt="Checks on Github pull requests" /&gt;
&lt;figcaption&gt;Checks on a Github Pull Request&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In addition to more monitoring, we’ll keep collecting feedback on a regular basis from all of the software engineers, calling for more meetings when needed. We will specifically be paying attention to new joiners, how they feel about the frontend stack and how we can make their onboarding even easier. We don’t want to be held back by legacy code. Instead, we want to be able to experiment with new technologies when relevant, adopt the latest JavaScript standards, and keep up with React.&lt;/p&gt;
&lt;p&gt;There is still much to do on the frontend. A Single-Page-Application is much more than just a website. It’s software that runs in a browser. Hundreds of different browser versions actually, operating at various speeds, with unreliable network connectivity. It has to be as good as any software program. The time when servers were the unique focus point has come and gone; frontend requires a different kind of attention, not less.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://medium.com/@romain.pellerin/regaining-control-over-doctolib-com-frontend-9ec8cc41037f"&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="Code"></category><category term="code"></category><category term="javascript"></category><category term="frontend"></category></entry><entry><title>Ruby and Ruby on Rails from scratch</title><link href="https://romainpellerin.eu/ruby-and-ruby-on-rails-from-scratch.html" rel="alternate"></link><published>2018-03-16T23:50:00+01:00</published><updated>2024-07-26T17:26:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2018-03-16:/ruby-and-ruby-on-rails-from-scratch.html</id><summary type="html">&lt;p&gt;How to learn Ruby and Rails&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I started learning a new language: Ruby! Coming from a JavaScript world, &lt;a href="http://frontendgods.com/getting-started-with-ruby-for/"&gt;this article&lt;/a&gt; helped me a lot (&lt;a href="https://romainpellerin.eu/extra/javascript-to-ruby.html"&gt;backed-up here, should it ever vanish from the Internet&lt;/a&gt;). In this article, I sum up everything I've learned so far. It's a sort of memo for myself.&lt;/p&gt;
&lt;h1 id="learning-resources"&gt;Learning resources&lt;/h1&gt;
&lt;h2 id="ruby"&gt;Ruby&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openclassrooms.com/courses/lancez-vous-dans-la-programmation-avec-ruby"&gt;https://openclassrooms.com/courses/lancez-vous-dans-la-programmation-avec-ruby&lt;/a&gt; (French)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tryruby.org"&gt;http://tryruby.org&lt;/a&gt;: awesome interactive tutoral&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rubykoans.com/"&gt;http://rubykoans.com/&lt;/a&gt;: learn by doing TDD (Test-Driven Development): make all tests pass&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="rails"&gt;Rails&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rubyonrails.org/doctrine/"&gt;http://rubyonrails.org/doctrine/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ideamotive.co/ruby-on-rails-development-guide/?in-2019"&gt;CHOOSING RUBY ON RAILS FOR YOUR NEXT WEB DEVELOPMENT PROJECT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pluralsight.com/courses/code-school-rails-for-zombies"&gt;Code School: Rails for Zombies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openclassrooms.com/en/courses/3149156-initiez-vous-a-ruby-on-rails"&gt;Initiez-vous à Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openclassrooms.com/en/courses/3432066-continuez-avec-ruby-on-rails"&gt;Continuez avec Ruby on Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="install"&gt;Install&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/rbenv/rbenv#basic-github-checkout"&gt;Install rbenv&lt;/a&gt;. In short, here is how:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install openssl libicu-dev libssl-dev libreadline-dev zlib1g-dev
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.rbenv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; src/configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make -C src
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
~/.rbenv/bin/rbenv init
&lt;span class="c1"&gt;# Open a new shell&lt;/span&gt;
mkdir -p &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;rbenv root&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;/plugins
git clone https://github.com/rbenv/ruby-build.git &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;rbenv root&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;/plugins/ruby-build
rbenv install &lt;span class="m"&gt;2&lt;/span&gt;.5.0
rbenv global &lt;span class="m"&gt;2&lt;/span&gt;.5.0

&lt;span class="c1"&gt;# Check everything is installed and correctly set up&lt;/span&gt;
curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, add must-have stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem install bundler

&lt;span class="c1"&gt;# In a fresh new Ruby project folder, create a Gemfile&lt;/span&gt;
rbenv &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;.5.0 &lt;span class="c1"&gt;# Set version 2.5.0 for this project, same as .nvmrc for Node projects&lt;/span&gt;
bundle init
bundle install --path vendor --binstubs bin &lt;span class="c1"&gt;# Set up .bundle config to install packages to the local folder&lt;/span&gt;
&lt;span class="c1"&gt;# Add vendor and .bundle to your .gitignore file&lt;/span&gt;

&lt;span class="c1"&gt;# In a Ruby project folder, install all dependencies&lt;/span&gt;
bundle install &lt;span class="c1"&gt;# or simply `bundle`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="upgrade-ruby-version"&gt;Upgrade Ruby version&lt;/h1&gt;
&lt;p&gt;Update the version in &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;.ruby-version&lt;/code&gt;. Then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.rbenv/plugins/ruby-build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; -
rbenv install &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rbenv rehash
gem install bundler
bundle
rbenv global &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat .ruby-version&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="stuff-to-know"&gt;Stuff to know&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt; is optional&lt;/li&gt;
&lt;li&gt;parentheses optional in &lt;code&gt;if&lt;/code&gt; statements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; vs &lt;code&gt;===&lt;/code&gt;: &lt;a href="https://stackoverflow.com/questions/4467538/what-does-the-operator-do-in-ruby"&gt;https://stackoverflow.com/questions/4467538/what-does-the-operator-do-in-ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;puts&lt;/code&gt; (adds new line) vs &lt;code&gt;print&lt;/code&gt; (no new line)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.each do |item| ... end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;10.times do |i| ... end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elsif&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array = [1,2]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When you place a colon in front of a simple word, you get a Ruby symbol: &lt;code&gt;:a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash = {a:1,b:2} # creates symbols :a and :b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash[:a]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash['ok'] = 'yolo' # ok is not a symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt; statement optional, last line is implicitely returned&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func(a,b)&lt;/code&gt; == &lt;code&gt;func a, b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj.func&lt;/code&gt; == &lt;code&gt;obj.func()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def initialize ... end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@classMemberVariable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def func&lt;/code&gt; == &lt;code&gt;def func()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return true if ....&lt;/code&gt; == &lt;code&gt;if ...&amp;lt;line break&amp;gt;return true&amp;lt;line break&amp;gt;end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Inheritance: &lt;code&gt;class Child &amp;lt; Mother&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace first occurrence in string: &lt;code&gt;string['word'] = 'new word'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ratings = Hash.new(0)&lt;/code&gt;: all new hashes will default to 0 as their value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do..end&lt;/code&gt; vs curly braces for blocks in Ruby: &lt;a href="https://stackoverflow.com/questions/5587264/do-end-vs-curly-braces-for-blocks-in-ruby"&gt;https://stackoverflow.com/questions/5587264/do-end-vs-curly-braces-for-blocks-in-ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pry&lt;/code&gt;: pauses execution but does not give access to local variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binding.pry&lt;/code&gt;: pauses execution, gives access to local variables but also pauses all threads (server and tests for instance)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;whereami&lt;/code&gt; == &lt;code&gt;@&lt;/code&gt; (in binding.pry / pry)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; (get help in binding.pry /pry)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PRY_RESCUE_RAIL=1 rails test&lt;/code&gt;: runs a test and pauses on falsy assertions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ranges"&gt;Ranges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x..y&lt;/code&gt; (y included) vs &lt;code&gt;x...y&lt;/code&gt; (y not included)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tests"&gt;Tests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert_equal x,y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert_match(/regex/, x)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/1961030/ruby-ampersand-colon-shortcut"&gt;Ruby ampersand colon shortcut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/14881125/what-does-to-proc-method-mean"&gt;What does to_proc method mean?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitepoint.com/closures-ruby/"&gt;Closures in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/36812647/what-does-ampersand-dot-mean-in-ruby"&gt;What does &amp;amp;. (ampersand dot) mean in Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.skorks.com/2013/04/ruby-ampersand-parameter-demystified/"&gt;Ruby &amp;amp; (Ampersand) Parameter Demystified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robots.thoughtbot.com/ruby-2-keyword-arguments"&gt;Ruby 2 Keyword Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/18289152/what-does-a-double-splat-operator-do"&gt;What does a double * (splat) operator do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/26938262/what-do-and-mean-in-ruby?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa"&gt;What do =~ and /\ mean in Ruby?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://simpleror.wordpress.com/2009/03/15/q-q-w-w-x-r-s/"&gt;%Q, %q, %W, %w, %x, %r, %s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://romainpellerin.eu/ruby-and-ruby-on-rails-from-scratch.html"&gt;Rails Routing from the Outside In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://infinum.co/the-capsized-eight/multiline-strings-ruby-2-3-0-the-squiggly-heredoc"&gt;Multiline strings in Ruby 2.3 - the squiggly heredoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.scoutapp.com/articles/2017/01/24/activerecord-includes-vs-joins-vs-preload-vs-eager_load-when-and-where"&gt;Making sense of ActiveRecord joins, includes, preload, and eager_load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/8198811/whats-the-difference-between-colon-and-fat-arrow"&gt;What's the difference between colon “:” and fat arrow “=&amp;gt;”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="code"></category><category term="ruby"></category><category term="rails"></category></entry><entry><title>A Web Project in 2017</title><link href="https://romainpellerin.eu/a-web-project-in-2017.html" rel="alternate"></link><published>2017-05-10T21:50:00+02:00</published><updated>2017-10-24T22:34:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2017-05-10:/a-web-project-in-2017.html</id><summary type="html">&lt;p&gt;Random stuff about a project I will probably never carry out&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am writing this here for posterity, again!&lt;/p&gt;
&lt;p&gt;Since February 2017, I am doing an internship in San Francisco. It is focused on web technologies. I am learning a shit ton of stuff everyday. Thus I'd like to apply all these best practices and use my daily tools on &lt;strong&gt;ONE BIG PROJECT&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This killer project must include the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;ul&gt;
&lt;li&gt;ES7&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt;/&lt;code&gt;async&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web worker&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;React (Fiber?) + Redux&lt;ul&gt;
&lt;li&gt;Webpack: &lt;code&gt;create-react-app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reselect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redux-form&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;React Native as well?&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create-react-native-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sequelize: &lt;code&gt;sequelize&lt;/code&gt; + &lt;code&gt;sequelize-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Express.js + GraphQL (with subscriptions): &lt;code&gt;express-graphql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Apollo or Relay&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsonwebtoken&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date-fns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storybook&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Server-side rendering with Next.js? &lt;code&gt;create-next-app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memoizee&lt;/code&gt; for external API calls made by the server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Progressive Web App&lt;ul&gt;
&lt;li&gt;Service worker (makes app available offline)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=kqi4Xa1ViOQ"&gt;Progressive Web Apps (Cyril Balit - Florian Orpelière)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API"&gt;Notifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Flexbox&lt;/li&gt;
&lt;li&gt;Grid&lt;/li&gt;
&lt;li&gt;CSS masks&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tachyons.io/"&gt;Tachyons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing/CI/Production&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jest-cli&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;standard-version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Travis-ci.org&lt;/li&gt;
&lt;li&gt;Now.sh?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tools&lt;ul&gt;
&lt;li&gt;yarn&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pm2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Prettier for code formatting&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flow.org/"&gt;Flow&lt;/a&gt;: &lt;code&gt;flow-bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Chrome extensions&lt;ul&gt;
&lt;li&gt;React Developer Tools&lt;/li&gt;
&lt;li&gt;Redux DevTools&lt;/li&gt;
&lt;li&gt;Apollo Client Developer Tools&lt;/li&gt;
&lt;li&gt;Lighthouse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;PageSpeed Insights&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other&lt;ul&gt;
&lt;li&gt;PostgreSQL or SQLite&lt;/li&gt;
&lt;li&gt;asm.js or WebAssembly (preferably the latter)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/physical-web/"&gt;Physical Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonus point if the project uses as many Github badges (meaning CI services) as I referenced on &lt;a href="https://romainpellerin.eu/open-source.html"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reminder for myself&lt;/strong&gt;: check out &lt;a href="https://romainpellerin.eu/carrying-out-a-web-project.html"&gt;this article&lt;/a&gt;&lt;/p&gt;</content><category term="Code"></category><category term="web"></category><category term="javascript"></category><category term="css"></category><category term="html"></category></entry><entry><title>Open Source</title><link href="https://romainpellerin.eu/open-source.html" rel="alternate"></link><published>2017-03-07T21:50:00+01:00</published><updated>2019-11-01T02:15:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2017-03-07:/open-source.html</id><summary type="html">&lt;p&gt;Resources for open source projects&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are a bunch of links for open source project maintainers/creators:&lt;/p&gt;
&lt;h1 id="documentation"&gt;Documentation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="toolscontinuous-integrationcontinuous-testing"&gt;Tools/Continuous integration/Continuous testing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://greenkeeper.io/"&gt;GreenKeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://saucelabs.com/open-source"&gt;Sauce Labs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://circleci.com/"&gt;CircleCI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeship.com/"&gt;Codeship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bithound.io/"&gt;bitHound: Node.js code and npm analysis for your team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gemnasium.com/"&gt;Gemnasium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codecov.io/"&gt;Codecov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrutinizer-ci.com/"&gt;Scrutinize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zenhub.com/"&gt;ZenHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeclimate.com/"&gt;Code Climate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/standard-version"&gt;standard-version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/conventional-changelog"&gt;Conventional Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="miscellaneous"&gt;Miscellaneous&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://makeapullrequest.com/"&gt;Make a Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://keepachangelog.com/en/0.3.0/"&gt;Keep A Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/2111-issue-and-pull-request-templates"&gt;Issue and Pull Request templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.freecodecamp.com/how-to-attract-new-contributors-to-your-open-source-project-46f8b791d787"&gt;How to attract new contributors to your open source project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://korben.info/badgen-pour-generer-vos-badges-svg.html"&gt;Badgen – Pour générer vos badges SVG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://unmaintained.tech/"&gt;No Maintenance Intended&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nikku/works-on-my-machine"&gt;nikku/works-on-my-machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://davidreagan.net/tech/fixing-the-support-problem/"&gt;Fixing the Support Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Checklist for a good open source project on Github: &lt;a href="https://www.yegor256.com/2018/05/08/open-source-attributes.html"&gt;An Open Code Base Is Not Yet an Open Source Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apps/welcome"&gt;Github Apps - Welcome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packager.io/"&gt;Packager.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://words.steveklabnik.com/what-comes-after-open-source"&gt;What comes after “open source”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zenika-open-source/open-source-promotion-cheat-sheet"&gt;Open source promotion cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="getting-paid"&gt;Getting paid&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codefund.app/"&gt;CodeFund&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="free-software"&gt;Free software&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://video.tedomum.net/videos/watch/22382fb9-ad79-4ac1-8df3-c7c027749425"&gt;Internet ou la révolution du partage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="open source"></category></entry><entry><title>Architectures</title><link href="https://romainpellerin.eu/architectures.html" rel="alternate"></link><published>2017-01-05T11:00:00+01:00</published><updated>2017-01-24T12:58:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2017-01-05:/architectures.html</id><summary type="html">&lt;p&gt;A bunch of resources about architectures&lt;/p&gt;</summary><content type="html">&lt;h1 id="general"&gt;General&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/"&gt;Stack Overflow: The Architecture - 2016 Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="scalability-and-distributed-systems"&gt;Scalability and distributed systems&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://highscalability.com/blog/2016/4/20/how-twitter-handles-3000-images-per-second.html"&gt;How Twitter Handles 3,000 Images Per Second&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aphyr/distsys-class/blob/master/README.markdown"&gt;An introduction to distributed systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.twitter.com/2017/the-infrastructure-behind-twitter-scale"&gt;The Infrastructure Behind Twitter: Scale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="networks"></category><category term="systems"></category><category term="infrastructure"></category><category term="architecture"></category></entry><entry><title>React</title><link href="https://romainpellerin.eu/react.html" rel="alternate"></link><published>2016-01-08T01:00:00+01:00</published><updated>2021-02-03T00:01:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2016-01-08:/react.html</id><summary type="html">&lt;p&gt;A quick introduction to React.js&lt;/p&gt;</summary><content type="html">&lt;p&gt;First of all, I wish you a Happy New Year. May it be full of happiness and lines of code :-)&lt;/p&gt;
&lt;p&gt;Let's now talk about the new hotness, a JavaScript library getting more and more trendy, with an unceasingly growing community: &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt;. It's under active development these days, powered by Facebook (and initially created by). Basically, it's meant to build user interfaces in a web context, but recently &lt;a href="https://facebook.github.io/react-native/"&gt;they also exported it to mobile development&lt;/a&gt;, alloying anyone to write some kind of cross-platform code for both Android and iOS, in JavaScript, just like Appcelerator Titanium.&lt;/p&gt;
&lt;p&gt;At the present time, I'm still getting acquinted with it, but here are a few pieces of advice about how to &lt;a href="https://facebook.github.io/react/docs/getting-started.html"&gt;get started&lt;/a&gt; &lt;strong&gt;correctly&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="must-read"&gt;Must read&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/petehunt/react-howto"&gt;react-howto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/petehunt/webpack-howto"&gt;webpack-howto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/hjs-webpack"&gt;Presets for setting up webpack with hotloading react and ES6(2015) using Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rackt.org/redux/index.html"&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.u601nht6y"&gt;Smart and Dumb Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react.parts/native"&gt;React modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/jnhuynh/86693d8b485f4d335300"&gt;Project structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@sapegin/react-and-redux-single-page-applications-resources-22cd859b0c1d"&gt;React and Redux Single Page Applications Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://overreacted.io/"&gt;Overreacted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://overreacted.io/react-as-a-ui-runtime/"&gt;React as a UI Runtime&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="how-to"&gt;How to&lt;/h1&gt;
&lt;p&gt;You have 2 main tools of choice, to compile it into some browser-compliant package: Webpack or Browserify. I personally decided to go with the former, as it's the most popular and offer more possibilites. Briefly, how to start a new project with webpack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm init &lt;span class="c1"&gt;# Entry point: index.js&lt;/span&gt;
npm install --save react react-dom babel-preset-react babel-preset-es2015
&lt;span class="c1"&gt;# The previous line is required to run React with ES6&lt;/span&gt;
npm install webpack --save-dev
&lt;span class="c1"&gt;# --save-dev allow us to add it to the package.json&lt;/span&gt;
npm install webpack-dev-server --save-dev
&lt;span class="c1"&gt;# To live reload changes in the browser in development&lt;/span&gt;
&lt;span class="c1"&gt;# MUST NOT BE USED IN PRODUCTION&lt;/span&gt;
npm link webpack &lt;span class="c1"&gt;# To make the command available as if it was installed globally&lt;/span&gt;
npm link webpack-dev-server

&lt;span class="c1"&gt;# Install babel&lt;/span&gt;
npm install babel-loader --save-dev
&lt;span class="c1"&gt;# OR, in case of problem&lt;/span&gt;
npm install babel-loader@5.x --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="configure-webpack"&gt;Configure webpack&lt;/h2&gt;
&lt;p&gt;There are &lt;a href="http://webpack.github.io/docs/configuration.html"&gt;two ways&lt;/a&gt; to pass the configuration object to webpack. However, here we're going to use the CLI way, which uses a conf file. Create &lt;code&gt;webpack.config.js&lt;/code&gt; at the root of the project, containing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// configuration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's all for now. This article is likely to be updated in a near future, stay tuned!&lt;/p&gt;
&lt;p&gt;PS: a friend of mine also gave a talk last year, at our school, about React. He was an avant-gardist ;-)&lt;/p&gt;
&lt;iframe width="700" height="394" src="https://www.youtube-nocookie.com/embed/_u3z_kIlXgg?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://medium.com/netscape/webpack-3-react-production-build-tips-d20507dba99a"&gt;Tips for Webpack here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="futher-reading"&gt;Futher reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/better-programming/i-almost-got-fired-for-choosing-react-in-our-enterprise-app-846ea840841c"&gt;I Almost Got Fired for Choosing React in Our Enterprise App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lacke.mn/reduce-your-bundle-js-file-size/"&gt;Reduce Your bundle.js File Size By Doing This One Thing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benoitvallon/react-native-nw-react-calculator"&gt;Mobile, desktop and website Apps with the same code (React native)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://reactjsnews.com/structuring-react-projects/"&gt;How to Structure a React Project?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/"&gt;How to Build a Todo App Using React, Redux, and Immutable.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetfinch.com/blog/cross-platform-app-nwjs-react-flux"&gt;Building a cross-platform desktop app with NW.js, React &amp;amp; Flux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://24ways.org/2015/universal-react"&gt;Universal React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.risingstack.com/react-js-best-practices-for-2016/"&gt;React.js Best Practices for 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/technologies/react"&gt;React Lessons - Screencast Video Tutorials @eggheadio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree"&gt;Redux Lessons #1 - Screencast Video Tutorials @eggheadio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/lessons/javascript-redux-simplifying-the-arrow-functions"&gt;Redux Lessons #2 - Screencast Video Tutorials @eggheadio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://reactcheatsheet.com/"&gt;React Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/07/debug-react-redux-firefox-add-ons/"&gt;Inspect, Modify, and Debug React and Redux in Firefox with Add-ons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dmitripavlutin.com/7-architectural-attributes-of-a-reliable-react-component/"&gt;7 architectural attributes of a reliable React component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react.holiday/"&gt;React 🎄&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/react-devtools/"&gt;React Developer Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/remotedev/"&gt;Redux DevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/11/15/best-practices-react-redux-web-application-development/"&gt;Best practices with React and Redux web application development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2018/04/testing-strategies-for-react-and-redux/"&gt;Testing Strategies for React and Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="bundle-size-optimization"&gt;Bundle size optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/danvk/source-map-explorer"&gt;source-map-explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer"&gt;webpack-bundle-analyzer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@joeclever/three-simple-ways-to-inspect-a-webpack-bundle-7f6a8fe7195d"&gt;Three simple ways to inspect a Webpack bundle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://houssein.me/progressive-react"&gt;Progressive React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6WvSXoYrM5o"&gt;Improving a React app performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nitin42/react-perf-devtool"&gt;react-perf-devtool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="functional-components"&gt;Functional components&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/mjackson/status/1091475757530963968"&gt;Did you know that React classes are actually than function components and that React is optimized for function components?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/missive-app/45-faster-react-functional-components-now-3509a668e69f"&gt;45% Faster React Functional Components, Now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/43470659/declare-a-functional-component-as-pure"&gt;Declare a functional component as “pure”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/groww-engineering/stateless-component-vs-pure-component-d2af88a1200b"&gt;Stateless Component vs Pure Component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="about-babel"&gt;About Babel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thejameskyle/babel-handbook/blob/master/translations/en/README.md"&gt;Babel Handbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="about-redux"&gt;About Redux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6"&gt;A cartoon intro to Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="code"></category><category term="javascript"></category><category term="react"></category><category term="mobile"></category><category term="android"></category></entry><entry><title>Carrying Out A Web Project</title><link href="https://romainpellerin.eu/carrying-out-a-web-project.html" rel="alternate"></link><published>2015-12-03T00:40:00+01:00</published><updated>2019-12-08T21:35:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-12-03:/carrying-out-a-web-project.html</id><summary type="html">&lt;p&gt;Resources for web projects&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some resources.&lt;/p&gt;
&lt;h1 id="how-to-carry-out-a-web-project"&gt;How to carry out a web project?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://darklg.me/2012/04/methodologie-integration-web-front-end/"&gt;Ma méthodologie d’intégration web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://old.etherpad-mozilla.org/RAI9OV5U2k"&gt;Some pieces of advice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.24joursdeweb.fr/2017/maintenabilite-du-code-html-css-entre-automatisation-et-guide-de-style/"&gt;Maintenabilité du code HTML / CSS : entre automatisation et guide de style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/developer-roadmaps/"&gt;Developer Roadmaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="css"&gt;CSS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dhoko/Guidelines/blob/master/CSS-guidelines.md"&gt;Pour une CSS simple et réutilisable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cssvalues.com/"&gt;CSS Values&lt;/a&gt;: a good documentation about CSS properties&lt;/li&gt;
&lt;li&gt;&lt;a href="http://guidecss.fr/"&gt;Feuilles de styles CSS - Conseils et bonnes pratiques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alsacreations.com/article/lire/1707-mini-convention-css.html"&gt;Mini Convention CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5F_ngjHDcJQ"&gt;Flexbox, et le CSS redevient fun ! (Hubert SABLONNIÈRE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=H8lICKucWL4"&gt;CSS is Awesome Igor Laborie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gridbyexample.com/"&gt;Grid by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.freecodecamp.org/everything-you-need-to-know-about-css-variables-c74d922ea855"&gt;Everything you need to know about CSS Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://beta.observablehq.com/@eeeps/w-descriptors-and-sizes-under-the-hood"&gt;w descriptors and sizes: Under the hood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/decorating-lines-of-text-with-box-decoration-break/"&gt;Decorating lines of text with box-decoration-break&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing"&gt;Mastering margin collapsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-doodle.com/"&gt;CSS doodle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/did-you-know-that-style-and-script-tags-can-be-set-to-display-block/"&gt;Did you know that style and script tags can be set to display: block?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://30-seconds.github.io/30-seconds-of-css/"&gt;30 Seconds of CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="support-and-compatibility"&gt;Support and compatibility&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://caniuse.com"&gt;caniuse.com&lt;/a&gt;: check out the tab 'Relative'&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gs.statcounter.com"&gt;gs.statcounter.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org"&gt;developer.mozilla.org&lt;/a&gt; aka MDN&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chromestatus.com/features"&gt;www.chromestatus.com/features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/"&gt;developer.microsoft.com/en-us/microsoft-edge/platform/status/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webkit.org/status/"&gt;webkit.org/status/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://platform-status.mozilla.org"&gt;platform-status.mozilla.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bugzilla.mozilla.com"&gt;bugzilla.mozilla.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="centering"&gt;Centering&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://howtocenterincss.com/"&gt;How to Center in CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="mobile-development"&gt;Mobile development&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://putaindecode.fr/posts/frontend/comment-deboguer-du-web-sur-tablettes-et-telephones/"&gt;Comment déboguer facilement du web y compris sur tablettes et téléphones&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="responsive-design"&gt;Responsive design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://goetter.fr/nav/"&gt;Ultra simple Responsive navigation snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Responsive_web_design"&gt;Responsive web design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="compatibility"&gt;Compatibility&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://caniuse.com/"&gt;Can I Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="testing"&gt;Testing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/03/doubling-down-on-cross-browser-testing/"&gt;Doubling Down on Cross-Browser Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.softwaretestinghelp.com/web-application-testing/"&gt;Web Testing: A Complete guide about testing web applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="finalizing"&gt;Finalizing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://webdevchecklist.com/"&gt;Web Developer Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://frontendchecklist.com/"&gt;Front-End-Checklist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=SVrgarg3KNs"&gt;Donner du sens à vos pages web avec Schema.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="https-and-security"&gt;HTTPS and security&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wooster.checkmy.ws/2014/10/upgrade-http-vers-https/"&gt;Check liste pour passer un site de HTTP à HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ssllabs.com/ssltest/"&gt;SSL Server Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observatory.mozilla.org/"&gt;Observatory by Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/"&gt;Mozilla SSL Configuration Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.system-linux.eu/index.php?post/2016/01/12/Certificat-SSL-avec-Letsencrypt"&gt;Certificat SSL avec Letsencrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webappsec-test.info/~bhill2/DifferentTakeOnOE.html"&gt;Why isn't HTTPS everywhere yet?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cipherli.st/"&gt;Cipherli.st - Strong Ciphers for Apache, nginx and Lighttpd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.adminrezo.fr/2016/12/securiser-serveur-apache-https-headers/"&gt;Rouler en classe A avec Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://korben.info/installter-activer-http2-apache2.html"&gt;Installer et activer HTTP2 sur Apache2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://korben.info/installer-activer-http2-nginx.html"&gt;Installer et activer HTTP2 sur Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.mozilla.org/Security/Guidelines/Web_Security"&gt;Security/Guidelines/Web Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google-gruyere.appspot.com/#0__hackers"&gt;Web Application Exploits and Defenses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="formatting-minimizing-indentation-compressing"&gt;Formatting / minimizing / indentation / compressing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lab.darklg.me/HTMLLisible/"&gt;HTMLLisible&lt;/a&gt;: auto-indent HTML&lt;/li&gt;
&lt;li&gt;&lt;a href="http://csslisible.com/en/"&gt;CSSLisible&lt;/a&gt;: order properties and auto-indent CSS&lt;/li&gt;
&lt;li&gt;&lt;a href="http://refresh-sf.com/"&gt;Online JavaScript/CSS Compressor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.clock.co.uk/blog/optimise-your-pngs-from-the-terminal-in-osx"&gt;Optimise your pngs from the terminal in OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alsacreations.com/article/lire/914-compression-pages-html-css-gzip-deflate.html"&gt;Cache et compression des pages web avec Gzip ou Deflate en HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;PageSpeed Insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.cowchimp.com/monitoring-unused-css-by-unleashing-the-devtools-protocol/"&gt;Monitoring unused CSS by unleashing the raw power of the DevTools Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="apache-setup"&gt;Apache setup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/phanan/htaccess"&gt;.htaccess Snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://korben.info/quelques-regles-htaccess-pour-securiser-votre-site.html"&gt;Quelques règles htaccess pour sécuriser votre site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="favicon"&gt;Favicon&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jonathantneal.com/blog/understand-the-favicon/"&gt;Understand the Favicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://putaindecode.io/fr/articles/favicon/"&gt;Un favicon vite fait bien fait&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On Linux, if you have &lt;code&gt;imagemagick&lt;/code&gt; installed, do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;convert favicon.png -alpha on -resize 256x256 &lt;span class="se"&gt;\&lt;/span&gt;
    -define icon:auto-resize&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;256,128,96,64,48,32,16&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    favicon.ico
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="useful-resources"&gt;Useful resources&lt;/h1&gt;
&lt;h2 id="ui"&gt;UI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refactoringui.com/"&gt;Refactoring UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://uidb.io/"&gt;User Interface UI design Inspiration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog-en.tilda.cc/articles-website-design-mistakes"&gt;Common webpage design mistakes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fonts"&gt;Fonts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.filamentgroup.com/lab/font-loading.html"&gt;How we use web fonts responsibly, or, avoiding a @font-face-palm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://font-display.glitch.me/"&gt;Font-display &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/three-techniques-performant-custom-font-usage/"&gt;Three Techniques for Performant Custom Font Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v-fonts.com/"&gt;Variable Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/understanding-web-fonts-getting/"&gt;Understanding Web Fonts and Getting the Most Out of Them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/fitting-text-to-a-container/"&gt;Fitting Text to a Container&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="icons"&gt;Icons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://goetter.fr/unicode/"&gt;Icones web Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pictonic.co/free"&gt;Pictonic - free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icomoon.io/app/"&gt;IcoMoon App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://iconmonstr.com/"&gt;iconmonstr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paymentfont.io/"&gt;PaymentFont: A sleek webfont containing 95 icons of all main payment operators and methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.cloudfour.com/seriously-dont-use-icon-fonts/"&gt;Seriously, Don’t Use Icon Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://benfrain.com/seriously-use-icon-fonts/"&gt;Seriously, use icon fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://preethisam.com/2018/06/25/how-to-use-emojis-as-icons/"&gt;How to Use Emojis as Icon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="images"&gt;Images&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/sometimes-sizes-is-quite-important/"&gt;Sometimes &lt;code&gt;sizes&lt;/code&gt; is quite important.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[DevFest Nantes 2018 - Fast and Beautiful Modern Image Delivery Techniques(https://www.youtube.com/watch?v=bTKRic9FWmM)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://responsivebreakpoints.com/"&gt;Responsive Image Breakpoints Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="debugging"&gt;Debugging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/datadriveninvestor/stopping-using-console-log-and-start-using-your-browsers-debugger-62bc893d93ff"&gt;How to stop using console.log() and start using your browser’s debugger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.24joursdeweb.fr/2018/la-console-javascript-avancee/"&gt;La console JavaScript avancée&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="bonus-html-emails"&gt;Bonus: HTML Emails&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/my-current-html-email-development-workflow/"&gt;My Current HTML Email Development Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.inkbrush.com/"&gt;Build Fully Responsive Email In Just Minutes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://foundation.zurb.com/emails.html"&gt;Foundation for Emails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="going-further"&gt;Going further&lt;/h1&gt;
&lt;h2 id="methodology"&gt;Methodology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.aaron-gray.com/a-criticism-of-scrum/"&gt;A CRITICISM OF SCRUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aaron-gray.com/ways-to-protect-flow/"&gt;WAYS TO PROTECT FLOW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="web-assembly"&gt;Web Assembly&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mbasso/awesome-wasm"&gt;Awesome wasm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.openbloc.fr/webassembly-first-steps/"&gt;WebAssembly 101: a developer's first steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.octo.com/en/webassembly-an-executable-format-for-the-web/"&gt;WebAssembly, an executable format for the web &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="pwas"&gt;PWAs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/dev-channel/a-pinterest-progressive-web-app-performance-case-study-3bd6ed2e6154"&gt;A Pinterest Progressive Web App Performance Case Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/ilt/pwa/lab-migrating-to-workbox-from-sw-precache-and-sw-toolbox"&gt;Lab: Migrating to Workbox from sw-precache and sw-toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/workbox/guides/migrate"&gt;Modifications to your existing configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/workbox/"&gt;Workbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@firt/google-play-store-now-open-for-progressive-web-apps-ec6f3c6ff3cc"&gt;Google Play Store now open for Progressive Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linters"&gt;Linters&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/stylelint/stylelint"&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eslint/eslint"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="testing_1"&gt;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/12/using-headless-mode-in-firefox/"&gt;Using Headless Mode in Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="performance"&gt;Performance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=YJGCZCaIZkQ"&gt;Speed at Scale: Web Performance Tips and Tricks from the Trenches (Google I/O ’19)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.dev/fast/"&gt;Fast load times&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="misc"&gt;Misc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://loige.co/6-rules-of-thumb-to-build-blazing-fast-web-applications/"&gt;6 Rules of thumb to build blazing fast web server applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/10-things-i-learned-making-the-fastest-site-in-the-world-18a0e1cdf4a7"&gt;10 things I learned making the fastest site in the world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://piwik.org/"&gt;Free Web Analytics Software (Piwik)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cubiq.org/the-perfect-php-clean-url-generator"&gt;The perfect PHP clean url generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.phptherightway.com/"&gt;PHP - The Right Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://whatwebcando.today/"&gt;What Web Can Do Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.opensearch.org/Home"&gt;OpenSearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.geek-directeur-technique.com/2016/08/24/de-la-gestion-de-projet-a-la-gestion-de-workflow"&gt;De la gestion de projet à la gestion de workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://korben.info/websocketd-communiquer-vos-pages-web-vos-outils-ligne-de-commande.html"&gt;WebSocketd – Faites communiquer vos pages web avec vos outils en ligne de commande&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details"&gt;Front-End Developer Handbook 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=par742RHhVM"&gt;Les Web DevTools en 2017 (Jean-Francois Garreau)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9PRPPJFaF_o"&gt;Optimiser les performances d'une webapp (Guillaume EHRET)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://paulbakaus.com/tutorials/performance/the-illusion-of-speed/"&gt;The Illusion of Speed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/06/firefox-54-e10s-webextension-apis-css-clip-path/"&gt;Firefox 54: E10S-Multi, WebExtension APIs, CSS clip-path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hacks.mozilla.org/2017/10/how-we-rebuilt-the-viewsourceconf-org-website/"&gt;How we rebuilt the viewsourceconf.org website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://whatwebcando.today/"&gt;What Web Can Do Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webaim.org/blog/user-agent-string-history/"&gt;History of the browser user-agent string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Roadmap to becoming a web developer in 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Microsoft/frontend-bootcamp"&gt;Frontend Bootcamp / Days in the Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://illustrated.dev/"&gt;Illustrated.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="web"></category><category term="code"></category><category term="html"></category><category term="css"></category><category term="javascript"></category></entry><entry><title>Embracing Java</title><link href="https://romainpellerin.eu/embracing-java.html" rel="alternate"></link><published>2015-12-03T00:35:00+01:00</published><updated>2015-12-03T00:35:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-12-03:/embracing-java.html</id><summary type="html">&lt;p&gt;Java is cool! Here are some useful resources.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some useful links about Java.&lt;/p&gt;
&lt;h1 id="general"&gt;General&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.roseindia.net/java/beginners/OSInformation.shtml"&gt;Operating System Information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html"&gt;Summary of Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/272187/setting-jdk-7-as-default/272190#272190"&gt;Setting JDK 7 as default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/11750545/how-do-i-view-jres-source-code-in-eclipse-on-linux-debian/28859130#28859130"&gt;How do I view JRE's source code in Eclipse on linux (debian)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/winterbe/java8-tutorial"&gt;Modern Java - A Guide to Java 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/7569658/where-can-i-find-javaee-packages-sources"&gt;Where can I find JavaEE packages' sources?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="concurrency"&gt;Concurrency&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://rom.developpez.com/java-synchronisation/"&gt;Java et la synchronisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alwin.developpez.com/tutorial/JavaThread/"&gt;Programmation des threads en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://java.developpez.com/faq/java/?page=langage_threads"&gt;Java &amp;amp; Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mdalbin.developpez.com/tutoriels/general/semaphores/"&gt;Sémaphores et Mutex en Delphi et Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://viennet.developpez.com/cours/java/thread/"&gt;Cours Thread et Communication en Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zenika.developpez.com/tutoriels/java/core/javaprogconcurrente/"&gt;Introduction à la programmation concurrente en Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="code-quality"&gt;Code quality&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.qulice.com/"&gt;Source Code Quality Police (Qulice)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="blogs"&gt;Blogs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.yegor256.com/"&gt;Blog About Computers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="code"></category><category term="java"></category></entry><entry><title>Developing For Android</title><link href="https://romainpellerin.eu/developing-for-android.html" rel="alternate"></link><published>2015-12-02T16:30:00+01:00</published><updated>2017-05-13T02:06:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-12-02:/developing-for-android.html</id><summary type="html">&lt;p&gt;Resources for Android development&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here are some useful resources for Android development.&lt;/p&gt;
&lt;h1 id="internationalization"&gt;Internationalization&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jeremie-martinez.com/2017/03/13/i18n-good-practices/"&gt;Internationalizing an Android app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="design"&gt;Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://romannurik.github.io/AndroidAssetStudio/"&gt;Android Asset Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://petrnohejl.github.io/Android-Cheatsheet-For-Graphic-Designers/"&gt;Android Cheatsheet for Graphic Designers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/opoloo/androidicons"&gt;Android Developer Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.androidicons.com/"&gt;Android Icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://google.github.io/material-design-icons/"&gt;Material icons guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lgvalle/Material-Animations"&gt;Android Transition animations explanation with examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="fragments"&gt;Fragments&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mathias-seguy.developpez.com/cours/android/fragments/"&gt;Les Fragments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="asynchronism"&gt;Asynchronism&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://android-er.blogspot.fr/2014/04/run-multi-asynctask-as-same-time.html"&gt;Run multi AsyncTask at the same time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="security"&gt;Security&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://android-developers.blogspot.fr/2013/02/using-cryptography-to-store-credentials.html"&gt;Using Cryptography to Store Credentials Safely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1TvS_mAvDpuaODAK4RG77x0OZsH4CfmxkYM9u1b6JDPo/mobilepresent"&gt;Secure your app: Fight the leaks! - Samsung&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="libraries"&gt;Libraries&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://android-arsenal.com/"&gt;Android Arsenal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.desarrollodroide.repos"&gt;Libraries for developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://infinum.co/the-capsized-eight/articles/top-5-android-libraries-every-android-developer-should-know-about"&gt;Top 5 Android libraries every Android developer should know about&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="finalizing-the-app-promoting-it"&gt;Finalizing the app / promoting it&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://placeit.net/"&gt;Free iPhone Mockup Generator &amp;amp; App Demo Videos by Placeit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.android.com/distribute/tools/promote/device-art.html"&gt;Device Art Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.opoloo.com/blog/articles/android-app-publishing-checklist--2"&gt;Android App Publishing Checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="testing"&gt;Testing&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jeremie-martinez.com/2015/04/17/tests-android/"&gt;No more excuses, Android testing is possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jeremie-martinez.com/2016/02/16/unit-tests/"&gt;3 unit tests to avoid bad surprises on Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="continuous-integration"&gt;Continuous Integration&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jeremie-martinez.com/2016/04/19/gocd-android/"&gt;Use GoCD for Android and get rid of Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jeremie-martinez.com/2016/01/14/devops-on-android/"&gt;DevOps on Android: From one Git push to production&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=3Ises8TgAp4"&gt;the talk given by the author&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineeringblog.yelp.com/2017/04/continuous-integration-on-android.html"&gt;Continuous Integration on Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="further-reading"&gt;Further reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/google-developers/developing-for-android-introduction-5345b451567c"&gt;Developing for Android: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ekN2zvFytZk"&gt;Deep Dive Into State Restoration (en) - Cyril Mottier, Capitaine Train - Droidcon Paris 2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cyrilmottier.com/2014/12/09/a-story-of-software-development-methodologies/"&gt;A Story of Software Development Methodologies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="code"></category><category term="android"></category><category term="java"></category></entry><entry><title>Introduction To Functional Programming</title><link href="https://romainpellerin.eu/introduction-to-functional-programming.html" rel="alternate"></link><published>2015-10-21T23:30:00+02:00</published><updated>2017-11-10T21:09:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-10-21:/introduction-to-functional-programming.html</id><summary type="html">&lt;p&gt;What is functional programming, some resources and how to start painlessly&lt;/p&gt;</summary><content type="html">&lt;h1 id="functional-programming-is-the-new-hotness-or-not"&gt;Functional programming is the new hotness... or not&lt;/h1&gt;
&lt;p&gt;Functional programming, or &lt;strong&gt;FP&lt;/strong&gt; to its friends, is a quite old paradigm, but still very little used. Here are some useful resources to get started with this, &lt;strong&gt;easily&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;/h1&gt;
&lt;h2 id="general"&gt;General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jugoncalves/functional-programming-should-be-your-1-priority-for-2015-47dd4641d6b9"&gt;Functional Programming should be your #1 priority for 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html"&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/k33g/files/tree/master/functional"&gt;https://github.com/k33g/files/tree/master/functional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=d-h0rsLKc9c"&gt;Apéro fonctionnel (P. Charrière - N. Leroux - E. Issartial - Q. Adam - T. Guenoux)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hemanth/functional-programming-jargon"&gt;Jargon from the functional programming world in simple terms!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fp-with-javascript"&gt;FP with Javascript&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/javascript-scene/the-rise-and-fall-and-rise-of-functional-programming-composable-software-c2d91b424c8c"&gt;The Rise and Fall and Rise of Functional Programming (Composing Software)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MostlyAdequate/mostly-adequate-guide"&gt;Mostly Adequate Guide To FP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0"&gt;Master the JavaScript Interview: What is Functional Programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-intro/"&gt;A GENTLE INTRODUCTION TO FUNCTIONAL JAVASCRIPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.promisejs.org/"&gt;Promises #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://javascriptplayground.com/blog/2015/02/promises/"&gt;Promises #2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://strongloop.com/strongblog/how-to-generators-node-js-yield-use-cases/"&gt;Generators (with &lt;code&gt;yield&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://koush.com/post/yield-await-v8"&gt;&lt;code&gt;yield&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.6"&gt;ECMAScript 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7"&gt;ECMAScript 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/danharper/74a5102363fbd85f6b67"&gt;Promises - &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://javascriptplayground.com/blog/2014/04/real-life-es6-arrow-fn/"&gt;ES6 Arrow functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://casualjavascript.com/javascript/es6/haskell/native/implementation/2015/11/12/haskell-in-es6-part-1.html"&gt;Haskell in ES6: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="scala"&gt;Scala&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.clement.delafargue.name/posts/2015-05-19-fp-patterns-scala-beginners.html"&gt;FP patterns for Scala beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="haskell"&gt;Haskell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.haskell.org/Learn_Haskell_in_10_minutes"&gt;Learn Haskell in 10 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://learnyouahaskell.com/chapters"&gt;Learn You a Haskell For Great Good!&lt;/a&gt; (&lt;a href="http://lyah.haskell.fr/"&gt;French version&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.haskellstack.org/en/stable/README/"&gt;The Haskell Tool Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="erlang"&gt;Erlang&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://learnyousomeerlang.com/content"&gt;Learn You Some Erlang For Gread Good!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wired.com/2015/09/whatsapp-serves-900-million-users-50-engineers/"&gt;Why WhatsApp Only Needs 50 Engineers for Its 900M Users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="javascript"></category><category term="code"></category><category term="functional programming"></category><category term="fp"></category></entry><entry><title>JavaScript</title><link href="https://romainpellerin.eu/javascript.html" rel="alternate"></link><published>2015-10-21T23:00:00+02:00</published><updated>2025-02-05T16:25:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-10-21:/javascript.html</id><summary type="html">&lt;p&gt;Why Javascript is the new hotness&lt;/p&gt;</summary><content type="html">&lt;h1 id="dates"&gt;Dates&lt;/h1&gt;
&lt;p&gt;Use &lt;a href="https://github.com/date-fns/date-fns"&gt;date-fns&lt;/a&gt;. It is &lt;a href="https://github.com/date-fns/date-fns/issues/275"&gt;lighter&lt;/a&gt; than Moment.js. And it is &lt;a href="https://twitter.com/dan_abramov/status/805030922785525760"&gt;immutable&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="a-word-on-eslint"&gt;A word on ESlint&lt;/h1&gt;
&lt;p&gt;ESlint is probably the most popular linter for JavaScript. It is also very convenient and benefits from a large community. That is why I use it.&lt;/p&gt;
&lt;p&gt;When I started using, I got confused by two different things: &lt;a href="http://eslint.org/docs/developer-guide/shareable-configs"&gt;shareable configs&lt;/a&gt; and &lt;a href="http://eslint.org/docs/developer-guide/working-with-plugins"&gt;plugins&lt;/a&gt;. This &lt;a href="https://groups.google.com/forum/#!topic/eslint/ttZUG3v7vn0"&gt;thread&lt;/a&gt; explains the difference between the two quite well. Here is my version:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Plugins are like function definitions (a set of custom rules). Configs are like actual calls to thoses functions (pre-defined configuration of rules - like whether they're enabled or not, and how they are configured).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="how-to-start-a-new-javascript-project"&gt;How to start a new JavaScript project?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;⚠️ UPDATE 2025: &lt;a href="https://2ality.com/2025/02/typescript-esm-packages.html"&gt;Tutorial: publishing ESM-based npm packages with TypeScript&lt;/a&gt; ⚠️&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If it is a simple project or a NPM package, I recommend having two distinct folders: &lt;code&gt;src&lt;/code&gt; for sources and &lt;code&gt;dist&lt;/code&gt; for builds.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Now, do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git init
git add remote origin ... &lt;span class="c1"&gt;# If need be&lt;/span&gt;
npm init
yarn add --dev babel-cli babel-preset-es2015
yarn add --dev eslint
yarn add --dev eslint-config-standard &lt;span class="se"&gt;\&lt;/span&gt;
               eslint-plugin-standard &lt;span class="se"&gt;\&lt;/span&gt;
               eslint-plugin-promise &lt;span class="se"&gt;\&lt;/span&gt;
               eslint-plugin-import &lt;span class="se"&gt;\&lt;/span&gt;
               eslint-plugin-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We use &lt;code&gt;babel&lt;/code&gt; to transpile our code, to better support old versions of NodeJS.&lt;/p&gt;
&lt;p&gt;Regarding the last line, the config &lt;a href="https://github.com/feross/eslint-config-standard"&gt;eslint-config-standard&lt;/a&gt; sets the configuration of these four plugins: &lt;code&gt;standard&lt;/code&gt;, &lt;code&gt;promise&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt;. That is why we need to install them alongside the shareable config. Of course it is a config for &lt;code&gt;eslint&lt;/code&gt;, that is why we installed it on the previous line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yarn add prettier-eslint-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Normally, &lt;a href="https://github.com/prettier/prettier-eslint"&gt;&lt;code&gt;prettier-eslint&lt;/code&gt;&lt;/a&gt; only operates on strings, not on files. &lt;code&gt;prettier-eslint-cli&lt;/code&gt; will provide you with a command to apply &lt;code&gt;prettier-eslint&lt;/code&gt; on files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is &lt;code&gt;prettier-eslint&lt;/code&gt; meant for?&lt;/strong&gt; Well, under the hood it calls &lt;a href="https://github.com/prettier"&gt;&lt;code&gt;prettier&lt;/code&gt;&lt;/a&gt; (probably the best JavaScript formatter to date) and then &lt;code&gt;eslint --fix&lt;/code&gt; to format your code. Twice. But there's &lt;a href="https://github.com/prettier/prettier-eslint#the-problem"&gt;a reason for that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we need to configure &lt;code&gt;eslint&lt;/code&gt; to tell it to use standard as its style.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use the standard style with ESlint, create &lt;code&gt;.eslint&lt;/code&gt; in the root directory of your project and write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{
    &amp;quot;extends&amp;quot;: &amp;quot;standard&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a badge to your &lt;code&gt;README.md&lt;/code&gt;: &lt;a href="https://badge.fury.io/for/js"&gt;badge.fury.io/for/js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;babel src --presets babel-preset-es2015 --out-dir dist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prettier-eslint \&amp;quot;src/*.js\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;lint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eslint src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;check&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run lint &amp;amp;&amp;amp; npm run test&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://ehret.me/node-env-vars/"&gt;Set up environment variables if need be via &lt;code&gt;.npmrc&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All set!&lt;/p&gt;
&lt;h1 id="resources"&gt;Resources&lt;/h1&gt;
&lt;h2 id="nodejs"&gt;NodeJS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://node.green/"&gt;Node.js ES2015/ES6, ES2016 and ES2017 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RIRB2AFrPV8"&gt;Node js comme les grands (Romain Maton)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/i0natan/nodebestpractices"&gt;Node.js Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="set-up-your-environment"&gt;Set-up your environment&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://eslint.org/docs/user-guide/getting-started"&gt;Getting Started with ESLint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="documentation"&gt;Documentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://usejsdoc.org/index.html"&gt;JSDoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/senchalabs/jsduck"&gt;JSDuck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="general"&gt;General&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=t52gxrBGAIQ"&gt;Dans cette jungle de l’outillage JavaScript, un retour à la simplicité est-... (Hubert SABLONNIÈRE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://30secondsofcode.org/"&gt;30 seconds of code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code concepts adapted for JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://2ality.com/2017/12/alternate-this.html"&gt;A different way of understanding this in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dorey.github.io/JavaScript-Equality-Table/"&gt;JavaScript Equality Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.sessionstack.com/tagged/tutorial"&gt;How JavaScript Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://js.foundation/announcements/2016/10/17/Linux-Foundation-Unites-JavaScript-Community-Open-Web-Development/"&gt;The Linux Foundation Unites JavaScript Community for Open Web Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f"&gt;How it feels to learn JavaScript in 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ponyfoo.com/articles/es6"&gt;ES6 Overview in 350 Bullet Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1234000000262"&gt;Programming JavaScript Applications (book)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wfMtDGfHWpA"&gt;Composition over Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;Learning JavaScript Design Patterns (book)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@_cmdv_/i-want-to-learn-javascript-in-2015-e96cd85ad225"&gt;Want to learn JavaScript in 2015 / 2016?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don't Know JS (book series)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@housecor/12-rules-for-professional-javascript-in-2015-f158e7d3f0fc"&gt;12 Rules for Professional JavaScript in 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.js-attitude.fr/2013/01/21/dix-bonnes-pratiques-javascript"&gt;10 bonnes pratiques JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kirupa.com/html5/a_deeper_look_at_objects_in_javascript.htm"&gt;A Deeper Look at Objects in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95"&gt;10 Interview Questions Every JavaScript Developer Should Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.boyet.com/blog/javascriptlessons/javascript-an-acceptable-use-of-double-equals-just/"&gt;JavaScript: an acceptable use of double-equals? Just.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sametmax.com/un-gros-troll-de-plus-sur-javacscript/"&gt;Un gros Troll de plus sur Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;Some really good best practices from Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7XZWqF2aHuI"&gt;DevFest Nantes 2015 - Découvrir ES6 par le code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webapplog.com/es6/"&gt;Top 10 ES6 Features Every Busy JavaScript Developer Must Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://putaindecode.io/fr/evenements/2015/calendrier-avent/"&gt;ES6/ES2015 en 24 jours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/javascript-scene/must-see-javascript-dev-tools-that-put-other-dev-tools-to-shame-aca6d3e3d925"&gt;Must See JavaScript Dev Tools That Put Other Dev Tools to Shame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/oneuijs/You-Dont-Need-jQuery"&gt;You Don't Need jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/how-to-schedule-background-tasks-in-javascript"&gt;How to Schedule Background Tasks in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.yld.io/2016/05/10/introducing-queues/"&gt;INTRODUCING QUEUES IN NODE.JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/k33g/files/tree/master/javascript"&gt;https://github.com/k33g/files/tree/master/javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mathiasbynens.be/notes/es6-const"&gt;ES6 const is not about immutability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.2ality.com/2016/02/ecmascript-2017.html"&gt;ECMAScript 2017: the final feature set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@thekevinscott/emojis-in-javascript-f693d0eb79fb"&gt;Emojis in Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://2ality.com/2017/04/transpiling-dependencies-babel.html"&gt;Transpiling dependencies with Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thomashunter.name/blog/running-a-node-js-process-on-debian-as-a-systemd-service/"&gt;Running a Node.js process on Debian as a Systemd Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e"&gt;The Cost Of JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/javascript-hacks-for-es6-hipsters-67d633ce8ace"&gt;JavaScript hacks for ES6 hipsters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vanillajstoolkit.com/"&gt;The Vanilla JavaScript Toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Arrow Functions in Class Properties Might Not Be As Great As We Think](https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy/"&gt;ECMA-262-3 in detail. Chapter 8. Evaluation strategy.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakearchibald.com/2021/export-default-thing-vs-thing-as-default/"&gt;&lt;code&gt;export default thing&lt;/code&gt; is different to &lt;code&gt;export { thing as default }&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakearchibald.com/2021/last-return-wins/"&gt;In JS functions, the 'last' return wins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="some-cool-nodenpm-stuffpackagestools"&gt;Some cool node/npm stuff/packages/tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.risingstack.com/how-to-become-a-better-node-js-developer-in-2016/"&gt;How to Become a Better Node.js Developer in 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.heroku.com/archives/2015/11/10/node-habits-2016"&gt;10 Habits of a Happy Node Hacker (2016)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chovy/node-startup"&gt;node-startup: startup script for Linux-based systems for running node app when rebooting using an /etc/init.d script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mafintosh/peerflix"&gt;peerflix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://radek.io/2015/10/27/nodegit/"&gt;nodegit: manipulating git repositories with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/"&gt;How to Use npm as a Build Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://krasimirtsonev.com/blog/article/javascript-library-starter-using-webpack-es6"&gt;Start your own JavaScript library using webpack and ES6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shime/livedown"&gt;Livedown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.sequelizejs.com/en/v3/"&gt;Sequelize: a promise-based ORM for Node.js (PostgreSQL, MySQL, MariaDB, SQLite and MSSQL)&lt;/a&gt; + &lt;a href="https://github.com/dchester/epilogue"&gt;Epilogue: create flexible REST endpoints and controllers from Sequelize models in your Express app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="closures"&gt;Closures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://renderedtext.com/blog/2015/11/18/closures-are-not-magic/"&gt;Closures are not magic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In loops, they are a common issue. Here is how to solve it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;Before ECMAScript 6 (double closures)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/preparing-ecmascript-6-let-const/"&gt;After ECMAScript 6 (the let keyword)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="testing"&gt;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://karma-runner.github.io/1.0/index.html"&gt;Karma&lt;/a&gt; with &lt;a href="https://jasmine.github.io/"&gt;Jasmine&lt;/a&gt; (&lt;strong&gt;edit March 14, 2017: I'd rather recommend going with Jest instead of Jasmine. Karma is different from Jest or Jasmine, it runs tests within web browsers, whereas plain Jasmine/Jest use Nodejs&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="javascript"></category><category term="code"></category><category term="web"></category><category term="node"></category></entry><entry><title>Documentation</title><link href="https://romainpellerin.eu/documentation.html" rel="alternate"></link><published>2015-09-25T12:00:00+02:00</published><updated>2017-01-18T01:50:00+01:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-09-25:/documentation.html</id><summary type="html">&lt;p&gt;Resources related to documentation&lt;/p&gt;</summary><content type="html">&lt;h1 id="create-your-documentation"&gt;Create your documentation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="real-world-documentations"&gt;Real world documentations&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://devdocs.io/express/"&gt;All the documentations about EVERYTHING (DevDocs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://overapi.com/"&gt;All the cheatsheets about EVERYTHING (OverAPI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zealdocs.org/"&gt;Zeal: offline documentation browser for software developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="code"></category><category term="documentation"></category></entry><entry><title>Designing An Efficient REST API</title><link href="https://romainpellerin.eu/designing-an-efficient-rest-api.html" rel="alternate"></link><published>2015-09-24T18:00:00+02:00</published><updated>2022-09-24T12:11:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-09-24:/designing-an-efficient-rest-api.html</id><summary type="html">&lt;p&gt;How to write beautiful and efficient REST APIs&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: see the bottom.&lt;/p&gt;
&lt;p&gt;Most of the time, the only purpose of an API is to give clients (a mobile application, a web site, a software program, a web browser, etc) access to a remote database (thus a server), for storing data (or making complex calculations sometimes).
&lt;strong&gt;The scheme is very simple: the server waits for incoming requests and responds accordingly. On the other hand, clients occasionally send requests, either to perform an action (saving, updating or deleting data), or to retrieve data.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When it comes to designing and implementing an (REST) API, you might be seeking a standard to follow (&lt;a href="http://jsonapi.org/"&gt;some people are trying to create a standard&lt;/a&gt;) or some &lt;a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api"&gt;best practices&lt;/a&gt; to apply. You might also wonder which language and which framework to use (don't &lt;a href="https://en.wikipedia.org/wiki/Reinventing_the_wheel"&gt;reinvent the wheel&lt;/a&gt; dude!). Actually, there are plenty of them. From the "&lt;em&gt;do it from scratch in Java&lt;/em&gt;" to the "&lt;em&gt;use this all-in-one Javascript framework&lt;/em&gt;", you have a lot of choices.&lt;/p&gt;
&lt;p&gt;I've experienced real API development with two languages so far, &lt;strong&gt;Javascript&lt;/strong&gt; and &lt;strong&gt;Scala&lt;/strong&gt;. With the former, I used the well-known &lt;a href="http://expressjs.com/"&gt;Express framework&lt;/a&gt;. With the latter, I used the equally well known &lt;a href="https://www.playframework.com/"&gt;Play Framework&lt;/a&gt; in its version 2.&lt;br&gt;
I also used &lt;a href="https://github.com/rpellerin/php-mvc-base"&gt;PHP&lt;/a&gt; and Java without any framework.&lt;/p&gt;
&lt;p&gt;But that's not our purpose in this article. Let's move on to the big question, "&lt;em&gt;How to design an efficient REST API&lt;/em&gt;". Then, we'll have a quick look at &lt;a href="http://expressjs.com/"&gt;Express&lt;/a&gt;, a famous Javascript framework and one of the best for APIs, in my opinion.&lt;/p&gt;
&lt;p&gt;In this article, I'll try to follow what &lt;a href="http://martinfowler.com/articles/richardsonMaturityModel.html"&gt;someone once wrote beautifully&lt;/a&gt;, in order to introduce REST APIs, and gradually explain how to improve them. I assume you - the reader - have some knowledge of the HTTP protocol.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ssllabs.com/"&gt;It goes without saying that you &lt;strong&gt;must use HTTPS&lt;/strong&gt; to ensure privacy. This way, everything will be encrypted and anyone sniffing the network won't be able to see the content of your requests or responses.&lt;/a&gt; Let's dive into REST APIs now!&lt;/p&gt;
&lt;h1 id="you-said-rest"&gt;You said "&lt;em&gt;REST&lt;/em&gt;"?&lt;/h1&gt;
&lt;p&gt;In "&lt;em&gt;REST API&lt;/em&gt;", "&lt;em&gt;REST&lt;/em&gt;" stands for "&lt;em&gt;Representational State Transfer&lt;/em&gt;", which is the software architectural style of the web. Basically, this means that any REST API relies on the HTTP protocol (and by extension HTTPS). As a consequence, the first step is to understand all the strengths and weaknesses of HTTP in order to use everything it has to offer. I will only be referring to HTTP version 1.1 in this article, since version 2 is still hardly used overall, and quite badly supported.&lt;/p&gt;
&lt;h1 id="its-all-about-resources"&gt;It's all about resources&lt;/h1&gt;
&lt;p&gt;URLs (&lt;em&gt;Uniform Resource Locator&lt;/em&gt;) represent resources. When designing an API, think about it as resource containers. Every end-point should represent either &lt;strong&gt;a resource&lt;/strong&gt; or &lt;strong&gt;a list of resources&lt;/strong&gt;. Following this, there must be &lt;strong&gt;two-end points per resource&lt;/strong&gt;, the resource collection, and an individual resource within the collection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/myresource
/myresource/{id}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If our API is hosted at &lt;a href="https://my-api.com"&gt;https://my-api.com&lt;/a&gt;, then we've just created the end-points &lt;a href="https://my-api.com/myresource"&gt;https://my-api.com/myresource&lt;/a&gt; and &lt;a href="https://my-api.com/myresource/id"&gt;https://my-api.com/myresource/{id}&lt;/a&gt;. But let's try to avoid abstraction and use real examples.&lt;/p&gt;
&lt;p&gt;We are developing a website where registered users can upload pictures. So, we need two end-points for our two entities:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/users
/pictures
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Those two end-points will then allow us to get the list of either all the users, or all the pictures. Now, what if we want to know the categories of the pictures? We also need to access individual resources. Let's create other end-points:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/users/{id}
/pictures/{id}
/pictures/categories
/pictures/categories/{id}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important thing here, is to understand that &lt;code&gt;{id}&lt;/code&gt; is a resource's unique identifier. For users, we retrieved these unique identifiers thanks to the &lt;code&gt;/users&lt;/code&gt; end-point (which had given us the list of users). So, &lt;code&gt;/users/{id}&lt;/code&gt; will give us all the details about ONE resource, the targeted user. The same rule applies for any other collection of resources.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;/pictures/categories&lt;/code&gt; represent a list of resources, in our case a list of categories. But this list belongs to a "bigger" resource, a container, &lt;code&gt;/pictures&lt;/code&gt;. It's a &lt;strong&gt;hierarchy&lt;/strong&gt;. This way, we are going to get all the possible categories for any picture.&lt;/p&gt;
&lt;p&gt;Now, let's add a feature: users can send messages to each other. How do we get all the messages sent by a specific user? And a specific message sent by a specific user? Like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/users/{userId}/messages
/users/{userId}/messages/{messageId}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="naming-convention"&gt;Naming convention&lt;/h2&gt;
&lt;p&gt;To remain consistent, try to use the plural form of every word used for your end-points, it will make things easier. &lt;a href="https://en.wikipedia.org/wiki/CamelCase"&gt;&lt;em&gt;camelCase&lt;/em&gt;&lt;/a&gt; is also a good practice, when necessary (but we always try to use simple single words).&lt;/p&gt;
&lt;h1 id="methods-also-called-verbs"&gt;Methods (also called verbs)&lt;/h1&gt;
&lt;p&gt;One of the biggest strengths of HTTP is &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html"&gt;its verbs&lt;/a&gt;. The most popular are GET and POST. The latter is mostly used for asynchronous calls (AJAX) or forms in web pages, whereas the former is used every time a page is accessed or reloaded from a browser.&lt;/p&gt;
&lt;p&gt;So, what are the equivalent verbs for our old friend called &lt;em&gt;CRUD&lt;/em&gt; (Create, Read, Update and Delete)? &lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;POST&lt;/strong&gt; and &lt;strong&gt;DELETE&lt;/strong&gt;. Consequently, any well designed REST API must make use of at least these four verbs. And yes, HTTP has more &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html"&gt;than four verbs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, this is how to create, get, update and delete a specific user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;POST   /users      &lt;span class="c1"&gt;# Create&lt;/span&gt;
PUT    /users/&lt;span class="o"&gt;{&lt;/span&gt;id&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Create&lt;/span&gt;
GET    /users/&lt;span class="o"&gt;{&lt;/span&gt;id&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Get&lt;/span&gt;
PUT    /users/&lt;span class="o"&gt;{&lt;/span&gt;id&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Update&lt;/span&gt;
DELETE /users/&lt;span class="o"&gt;{&lt;/span&gt;id&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# Delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, the important thing is that &lt;code&gt;PUT&lt;/code&gt; is used to create a &lt;strong&gt;specific resource&lt;/strong&gt; (a user), whose identifier has been chosen by the client. Then, the second &lt;code&gt;PUT&lt;/code&gt; updates the newly created resource. &lt;strong&gt;&lt;code&gt;POST&lt;/code&gt; is only dedicated to creating resources&lt;/strong&gt;, unlike &lt;code&gt;PUT&lt;/code&gt; that will mostly be used to update, but can also be used to create. When you want to create a resource without specifying its identifier, use &lt;code&gt;POST&lt;/code&gt;, like in the first line, where a user is signing up (then the API will create an identifier for this user). Logging in would be achieved like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;POST /users/login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://www.restapitutorial.com/"&gt;More information about verbs&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="understanding-http"&gt;Understanding HTTP&lt;/h1&gt;
&lt;p&gt;At this point, I need to add some explanation about the HTTP protocol. Every HTTP transaction (request or response) is made of three main parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An initial line&lt;/li&gt;
&lt;li&gt;Some headers&lt;/li&gt;
&lt;li&gt;The body, separated from the headers by a blank line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For requests, the initial line is made of a verb, a URL and the HTTP version used. For instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GET /users HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the other hand, for responses, it's a bit different: the HTTP version, a response status code and an English reason phrase describing the status code, like in the following example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;HTTP/1.1 404 Not Found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A typical simple request would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;POST /users/123 HTTP/1.1
Host: my-api.com
Content-Type: application/x-www-form-urlencoded

name=Jon&amp;amp;lastName=Snow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And a (non-related) response (I chose a random header):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;HTTP/1.1 200 OK
Expires: Thu, 24 Sep 2015 19:36:25 GMT

Hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That said, let’s get back to APIs.&lt;/p&gt;
&lt;p&gt;In the previous sections we learned the correct use of the HTTP verbs, so now let's talk about the body and the status code. Headers will come later.&lt;/p&gt;
&lt;h1 id="transmitting-data"&gt;Transmitting data&lt;/h1&gt;
&lt;p&gt;How can a client update a user on the server? What if someone wants to update their biography for example? Or wants to mention their age? Likewise, how does the server respond and send data back to clients? Here come the status codes and the body.&lt;/p&gt;
&lt;p&gt;Basically, clients need to send &lt;strong&gt;one type of information&lt;/strong&gt; in the body: data to be put into the remote database, via a &lt;strong&gt;PUT&lt;/strong&gt; or &lt;strong&gt;POST&lt;/strong&gt; request. It can be either to create a new resource or to update it (it depends on the HTTP verb used).&lt;/p&gt;
&lt;p&gt;On the other hand, the server can send different types of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Via the status code:&lt;/li&gt;
&lt;li&gt;How the request was handled&lt;/li&gt;
&lt;li&gt;In headers:&lt;/li&gt;
&lt;li&gt;Metadata&lt;/li&gt;
&lt;li&gt;In the body:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A resource&lt;/strong&gt; or &lt;strong&gt;a list of resources&lt;/strong&gt;, in response to a &lt;strong&gt;GET&lt;/strong&gt; request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Some details about a resource&lt;/strong&gt; newly created, in response to a &lt;strong&gt;PUT&lt;/strong&gt; or &lt;strong&gt;POST&lt;/strong&gt; request. For example, the resource's unique identifier or URL, to access this resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, the body is only dedicated to the requested resources(s). That's all. All other useful information &lt;strong&gt;must&lt;/strong&gt; be transmitted via the HTTP status code or headers.&lt;/p&gt;
&lt;h2 id="the-status-code"&gt;The status code&lt;/h2&gt;
&lt;p&gt;Want to tell the client the resource has been created? Use the code 201. Want to say something went wrong? 500. Forbidden? 403. Resource not found? 404. &lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;Choose the right one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the most used status codes for an API:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Status code&lt;/th&gt;
&lt;th&gt;Used in response to&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;200 OK&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;201 Created&lt;/td&gt;
&lt;td&gt;PUT (when creating a resource), POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;202 Accepted&lt;/td&gt;
&lt;td&gt;PUT, POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;204 No Content&lt;/td&gt;
&lt;td&gt;PUT, DELETE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;301 Moved Permanently&lt;/td&gt;
&lt;td&gt;GET, PUT, POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;400 Bad request&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;401 Unauthorized&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;403 Forbidden&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;404 Not Found&lt;/td&gt;
&lt;td&gt;GET, PUT (when updating), DELETE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;500 Internal Server Error&lt;/td&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The HTTP protocol is very flexible, allowing us to use any non existing code if needed and relevant, when none of them fits our needs. For example, the range 550-599 can be used freely, the way you want.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://i.stack.imgur.com/whhD1.png"&gt;Need help in choosing the correct status code?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="the-body"&gt;The body&lt;/h2&gt;
&lt;p&gt;Sending parameters, from HTML forms, is pretty easy, it's a key-value thing, where parameters are separated by "&amp;amp;", like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;firstName=Jon&amp;amp;lastName=Snow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, there's no recommended convention. I used camelCase (as shown above) without any particular reason. Choose one and be consistent.&lt;/p&gt;
&lt;p&gt;However, out of the context of HTML forms, how to format the body? Well, one could say we could use the same key-value format, but actually, it's not a good idea. Let's see what options we have.&lt;/p&gt;
&lt;h3 id="a-historic-battle-xml-vs-json-or-soap-vs-rest"&gt;A historic battle: XML vs. JSON or SOAP vs. REST&lt;/h3&gt;
&lt;p&gt;You have two main options: XML or JSON. Nowadays, a lot of people use JSON. I won't try to defend JSON here, please &lt;a href="http://www.json.org/xml.html"&gt;read this comparison&lt;/a&gt; or &lt;a href="http://www.json.org/"&gt;the official description&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To briefly sum it up, JSON brings efficiency, lightness and high-readability in a single format. Additionally, it's extremely easy to parse with any language, thanks to a great integration and a lot of support. It’s definitely the most popular format when dealing with APIs. You can easily create a single object or an array of objects.&lt;/p&gt;
&lt;p&gt;Just keep in mind that JSON is probably your best ally.&lt;/p&gt;
&lt;h2 id="a-particular-header"&gt;A particular header&lt;/h2&gt;
&lt;p&gt;Earlier on, we saw that the second part of every HTTP request is the headers section. Let me introduce one of them, probably the most important one: &lt;code&gt;Content-Type&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Its only purpose is to specify what kind of data we are sending. Consequently, in our case, this header should be like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically, its value is just a &lt;a href="https://en.wikipedia.org/wiki/Media_type"&gt;MIME type&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="real-world-example"&gt;Real world example&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;POST&lt;/strong&gt; request sent by the client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;POST /users HTTP/1.1
Host: my-api.com
Content-Type: application/json

{
    &amp;quot;name&amp;quot;: &amp;quot;Jon Snow&amp;quot;,
    &amp;quot;bad_guys_killed&amp;quot;: 200,
    &amp;quot;skills&amp;quot;:
        [
            {&amp;quot;name&amp;quot;: &amp;quot;Warrior&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Member of the Night&amp;#39;s Watch&amp;quot;}
        ],
    &amp;quot;is_a_badass&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically, its value is just a MIME type. To such a request, the response the server would send back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;HTTP/1.1 201 Created
Content-Type: application/json

{
    &amp;quot;id&amp;quot;: 123
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can see that the server created the resource (thanks to the status code). It also gives us its ID, JSON-formatted. Then, we can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GET /users/123 HTTP/1.1
Host: my-api.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We would get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json

{
    &amp;quot;id&amp;quot;: 123,
    &amp;quot;name&amp;quot;: &amp;quot;Jon Snow&amp;quot;,
    &amp;quot;bad_guys_killed&amp;quot;: 200,
    &amp;quot;skills&amp;quot;:
        [
            {&amp;quot;name&amp;quot;: &amp;quot;Warrior&amp;quot;},
            {&amp;quot;name&amp;quot;: &amp;quot;Member of the Night&amp;#39;s Watch&amp;quot;}
        ],
    &amp;quot;is_a_badass&amp;quot;: true,
    &amp;quot;created_at&amp;quot;: &amp;quot;2015-09-02T17:05:22.996Z&amp;quot;,
    &amp;quot;updated_at&amp;quot;: &amp;quot;2015-09-02T17:05:22.996Z&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;At this point, our API is able to do the four basic operations we needed (&lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt;, remember?), on any kind of entity, easily, thanks to a pretty format, JSON. End-points are semantic and hierarchically ordered. Everything is perfect.&lt;/p&gt;
&lt;div style="text-align: center"&gt;
&lt;img src="https://romainpellerin.eu/images/api-unicorn.gif" alt="A gif showing a unicorn" style="width: 150px; height: auto" /&gt;
&lt;/div&gt;

&lt;p&gt;But... (there's always a &lt;em&gt;but&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;We don't take advantage of all the strengths of HTTP. Headers, you remember? And what if we want to apply some filters to our &lt;strong&gt;GET&lt;/strong&gt; requests? Sorting? What about pagination? Getting your 1M users in a single response body isn't a good idea, trust me.&lt;/p&gt;
&lt;p&gt;More importantly, what about security? Authentication? But first, let's talk about HATEOAS...&lt;/p&gt;
&lt;h1 id="hateoas-the-holy-grail"&gt;&lt;a href="http://putaindecode.fr/posts/api/hateoas/"&gt;HATEOAS, the Holy Grail&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Most of the time, to access a specific resource, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the list of resources, e.g. &lt;code&gt;GET /users&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find the unique identifier of the targeted resource in this list&lt;/li&gt;
&lt;li&gt;Construct its URL, often https://&amp;lt;domain&amp;gt;/&amp;lt;list-of-resources&amp;gt;/&amp;lt;id&amp;gt;, e.g. &lt;code&gt;https://my-api.com/users/123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally, do &lt;code&gt;GET /users/123&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another approach would be providing directly every resource's URL in the list (among other links if necessary), like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[
    {
        &amp;quot;id&amp;quot;: 123,
        name: &amp;quot;Jon Snow&amp;quot;,
        &amp;quot;links&amp;quot;:
            [
                {
                    &amp;quot;rel&amp;quot;: &amp;quot;self&amp;quot;,
                    &amp;quot;href&amp;quot;: &amp;quot;https://my-api.com/users/123&amp;quot;
                },
                {
                    &amp;quot;ref&amp;quot;: &amp;quot;list&amp;quot;,
                    &amp;quot;href&amp;quot;: &amp;quot;https://my-api.com/users&amp;quot;
                }
            ],
        &amp;quot;bad_guys_killed&amp;quot;: 200,
        ...
    },
    {
        &amp;quot;id&amp;quot;: 124,
        ...
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of providing the full URL, you might as well only provide the path name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;links&amp;quot;:
    [
        {
            &amp;quot;rel&amp;quot;: &amp;quot;self&amp;quot;,
            &amp;quot;href&amp;quot;: &amp;quot;/users/123&amp;quot;
        },
        ...
    ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I'm not a huge fan of HATEOAS. I believe that an API should be consistent in its manner of accessing resources. I like to assume that, as soon as I know a resource's unique identifier, I can access it by constructing its URL, as I explained above. So, I don't need the links, I can construct them by myself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But I'm wrong&lt;/strong&gt;. This is definitely the best way to do. It adds a layer of abstraction. If one day you change the way to access a resource (not with a unique identifier anymore, but with a token, or an email address, or anything), if you always provided the link for each resource, the change would be transparent for your users.&lt;/p&gt;
&lt;h1 id="headers-are-metadata"&gt;Headers are metadata&lt;/h1&gt;
&lt;p&gt;A great thing to consider is that the body &lt;strong&gt;must&lt;/strong&gt; only contain the requested resource(s). Any other piece of information must go to the headers. Furthermore, you can create any header you want.&lt;/p&gt;
&lt;h2 id="authentication"&gt;Authentication&lt;/h2&gt;
&lt;p&gt;There are two major concepts under the name of &lt;em&gt;authentication&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign up/Log in/Log out: &lt;strong&gt;user management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Authorization: &lt;strong&gt;restricting the access to the API&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;User management can be be achieved with cookies. This way, you can restrict some end-points to logged in users only.&lt;/p&gt;
&lt;p&gt;In parallel, you might want to restrict the entire API to specific clients. One could say "&lt;em&gt;Use basic authentication&lt;/em&gt;", but that doesn't really fit our need since it's not the original purpose of basic auth.&lt;/p&gt;
&lt;p&gt;What you can do instead is quite easy: create as many HTTP headers as you want and send (secret) keys on every request. For example, let's create a key to make sure we're accessing the right app, and another one to define the access level granted:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;POST /users HTTP/1.1
Host: my-api.com
Content-Type: application/json
Security-APP-ID: 123456
Security-Access-Level: 3

{
    &amp;quot;name&amp;quot;: &amp;quot;Jon Snow&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously, as I said in the beginning of this article, all of this doesn't make sense at all if you don't use HTTPS (and force it!). You really don't want to expose such keys to anyone on the network.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://restcookbook.com/Basics/loggingin/"&gt;More information about authentication&lt;/a&gt; and about &lt;a href="http://blog.slaks.net/2015-10-13/web-authentication-arms-race-a-tale-of-two-security-experts/"&gt;security in general&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="location"&gt;Location&lt;/h2&gt;
&lt;p&gt;Another useful header is &lt;code&gt;Location&lt;/code&gt;. A good practice is to use it after creating a resource with &lt;strong&gt;POST&lt;/strong&gt;, to give back the location of the resource newly created. This way, no body is needed and your API can respond with a status code &lt;em&gt;201 Created&lt;/em&gt;, without a body. For example, after creating the user &lt;em&gt;Jon Snow&lt;/em&gt;, we would get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;HTTP/1.1 201 Created
Location: https://my-api.com/users/123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The protocol and domain are optional, we could just send &lt;code&gt;/users/123&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="other-useful-piece-of-information"&gt;Other useful piece of information&lt;/h2&gt;
&lt;p&gt;Basically, you can create as many custom headers as you want. A good practice with end-points returning a list of resources, is to give the total number of records in the database when relevant, via a header. You may wonder why, since we can programmatically count the number of results. But, as I will explain it in the next section, you are never going to return the full list of results in a single response.&lt;/p&gt;
&lt;p&gt;So, this is an example of a header specifying the number of rows. The request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GET /users HTTP/1.1
Host: my-api.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json
Total-Rows: 7897

[
    {
        id: 1,
        ...
    },
    ...
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id="pagination"&gt;Pagination&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;When returning a list of resources&lt;/strong&gt;, above a certain number or results, you should split your response in pages. It's a good practice for reducing waiting time and the weight of responses. Moreover, you might not need the whole list at once. Depending on the amount of details provided for each resource, a general rule would be returning between 100 and 1000 results per request as a maximum.&lt;/p&gt;
&lt;p&gt;Requesting a page is as simple as providing a query parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GET /users?page=3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the server side, you would just skip the &lt;em&gt;&amp;lt;number-of-results-per-page&amp;gt;*&amp;lt;number-of-page&amp;gt;&lt;/em&gt; first users. Pages start at 0.&lt;/p&gt;
&lt;p&gt;For instance, if you return 100 users per request, with page 0 you would skip no one and simply returns the first 100 users (from 0 to 99). On page 1, you skip the first 100 users from your database and return the users from 100 to 199, and so on.&lt;/p&gt;
&lt;p&gt;But there's a problem...&lt;/p&gt;
&lt;p&gt;Let's say you have 10 users in your database. Every &lt;code&gt;GET /users&lt;/code&gt; returns 3 users at most, sorted by age.&lt;/p&gt;
&lt;p&gt;In SQL, this would be something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AGE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIMIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OFFSET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cm"&gt;/* where x equals 3*&amp;lt;number of page&amp;gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You'll then have 3 pages.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Page 0&lt;/th&gt;
&lt;th&gt;Page 1&lt;/th&gt;
&lt;th&gt;Page 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;45,&lt;/strong&gt; Jon, 20&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;55,&lt;/strong&gt; Alice, 30&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;99,&lt;/strong&gt; Pete, 37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;87,&lt;/strong&gt; Laura, 23&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;9,&lt;/strong&gt; Bob, 33&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1,&lt;/strong&gt; Cindy, 39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3,&lt;/strong&gt; Jean, 25&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2,&lt;/strong&gt; Helen, 36&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;78,&lt;/strong&gt; Max, 40&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is a scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GET /users?page=0&lt;/code&gt;: fine, you get results from Jon (id 45) to Jean (id 3).&lt;/li&gt;
&lt;li&gt;A new user (Mary) signs up on your website/mobile application, aged of 24.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /users?page=1&lt;/code&gt;: you get results from Jean to Bob. You got the same person twice (Jean), this is a problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-happened"&gt;What happened?&lt;/h2&gt;
&lt;p&gt;As Mary is 24 and the API returns results sorted by age, Mary would be returned on page 0, which shifts Jean to page 1.&lt;/p&gt;
&lt;p&gt;A good way to solve this problem is to create a pagination based on an entity (here, a user). Instead of requesting a particular page, you would say to the API "&lt;em&gt;give me results after this user&lt;/em&gt;" or "&lt;em&gt;before this user&lt;/em&gt;". Let me explain it by replaying our scenario:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GET /users&lt;/code&gt;: no pagination specified, fine, you get results from Jon (id 45) to Jean (id 3)&lt;/li&gt;
&lt;li&gt;A new user (Mary) signs up on your website/mobile application, aged of 24.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /users?pageAfter=3&lt;/code&gt;: since the last person of our previous results had an id of 3, we request the users &lt;strong&gt;after&lt;/strong&gt; that ID. This way, we make sure we won't get duplicated results.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To achieve this, you can either write a more complex SQL query of simply do the pagination programmatically.&lt;/p&gt;
&lt;p&gt;The only problem that still remains is that, by doing this, we have no way to retrieve Mary, except if we request page 0 again, by doing this, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GET /users?pageBefore=3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Two last things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always enable pagination, even if your entire collection is small and will never grow. Like this, you API's users won't get lost. The API remains consistent.&lt;/li&gt;
&lt;li&gt;If a page returns this entire collection, use the status code 200. Otherwise, use the status code 206 (&lt;em&gt;Partial Content&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://metabates.com/2012/02/22/adding-pagination-to-an-api/"&gt;More information about pagination&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="filtering-and-sorting"&gt;Filtering and sorting&lt;/h1&gt;
&lt;p&gt;Every end-point that returns a list of resource should allow filtering on fields, as well as sorting. The following request should be possible:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;GET /users?country=US&amp;amp;age=21&amp;amp;sortBy=name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We request all the users from the US, aged of 21, sorted by name. The inner mechanism is up to the developers.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We're done! Now, you know how to build efficient and robust APIs.&lt;/p&gt;
&lt;p&gt;Building an efficient API involves many aspects to consider, and most of all, requires a good knowledge of HTTP. It's time-consuming at first sight, but once you know what you're doing, what your needs are in terms of features, it's pretty straightforward. Considering all aspects right at the beginning, like security or the database architecture and how you would like to expose it, is key. That's what is called designing an architecture, and one should pay heed to it. When properly and carefully done, the API implementation job is fairly easy.&lt;/p&gt;
&lt;p&gt;What are the next steps?&lt;/p&gt;
&lt;h1 id="add-a-documentation-for-other-developers-who-use-your-api"&gt;Add a documentation for other developers who use your API&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://apidocjs.com/"&gt;apidoc&lt;/a&gt; (I really like this one, very easy)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://swagger.io/"&gt;Swagger.io&lt;/a&gt; (good reputation, altough I never tried it)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@orliesaurus/a-review-of-all-most-common-api-editors-6a720dc4f4e6"&gt;A full list of most common API editors&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="going-further-create-a-cli"&gt;Going further: create a CLI&lt;/h1&gt;
&lt;p&gt;Make you API public! Create a documentation and a NPM package to ease the work for developers. &lt;a href="https://www.clever-cloud.com/blog/features/2015/09/21/Public-API-available/"&gt;Read how Clever Cloud did it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/cliparse"&gt;cliparse&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="quick-example-with-expressjs"&gt;Quick example with Express.js&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://expressjs.com/"&gt;Express&lt;/a&gt; ease the process of developing APIs with Javascript so much! You should definitely give it a try!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm init
npm install -g express &lt;span class="c1"&gt;# Globally, to be able to use the CLI of express&lt;/span&gt;
npm install -S express &lt;span class="c1"&gt;# Locally, added as a dependency&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is how to define a little API with Express (I only wrote the most important lines). Every controller defines many functions to handle the end-points (storing data into the database, etc.).&lt;/p&gt;
&lt;p&gt;In this example, the access to all the end-points is restricted, with a &lt;a href="http://expressjs.com/guide/using-middleware.html"&gt;middleware&lt;/a&gt; called &lt;code&gt;auth&lt;/code&gt;. The clients need to provide specific headers in order to perfom actions with the API.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Controllers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;usersController&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cloud/controllers/users.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;categoriesController&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cloud/controllers/category.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Configuration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cloud/functions/security&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methodOverride&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Allow PUT and DELETE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/*** API ***/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Users&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;usersController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/users/:id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;usersController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;usersController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/users/login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;usersController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/users/:id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;usersController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/users/:id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;usersController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_delete&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// In case of failure&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Some logging&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Let it beee&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's it! With only a few lines, you can easily get a working API.&lt;/p&gt;
&lt;p&gt;This is now the end of this article, hope it will help you! Any feedback appreciated ;)&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="tldr"&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Here is a little recap of everything above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;End-points represent either an individual resource or a collection of resources&lt;/li&gt;
&lt;li&gt;Use HTTPS verbs: &lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;POST&lt;/strong&gt; and &lt;strong&gt;DELETE&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Use HTTP status codes (those already existing or yours)&lt;/li&gt;
&lt;li&gt;Use JSON&lt;/li&gt;
&lt;li&gt;The body must only contain the requested information. It can be either:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A resource or partial details about a resource&lt;/strong&gt; (JSON object)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A list of resources&lt;/strong&gt; (JSON array): also provide full link with each resource (&lt;a href="https://my-api/users/123"&gt;https://my-api/users/123&lt;/a&gt; for example)&lt;/li&gt;
&lt;li&gt;Metadata must be put inside headers&lt;/li&gt;
&lt;li&gt;Number of rows when returning a list of results (added by the server)&lt;/li&gt;
&lt;li&gt;Secret keys for authentication/restricting access to the API (added by the client)&lt;/li&gt;
&lt;li&gt;Cookies for user management&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Location&lt;/code&gt; header (with the status code &lt;em&gt;201 Created&lt;/em&gt;, but without a body) after creating a resource with &lt;strong&gt;POST&lt;/strong&gt;, to give the resource's link&lt;/li&gt;
&lt;li&gt;Use query parameters&lt;/li&gt;
&lt;li&gt;Filtering: &lt;code&gt;GET /users?country=US&amp;amp;age=21&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sorting: &lt;code&gt;GET /users?sortBy=name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pagination: &lt;code&gt;GET /users?pageAfter=3&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Always enable pagination on any collection, even for the small ones&lt;/li&gt;
&lt;li&gt;Pagination must be based on "&lt;em&gt;after a resource's identifier&lt;/em&gt;" or "&lt;em&gt;before a resource's identifier&lt;/em&gt;" to avoid duplicate content across pages&lt;/li&gt;
&lt;li&gt;Use the status code 200 when the entire collection fits in one page, otherwise 206&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="going-further"&gt;Going further&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/dzuelke/designing-http-interfaces-and-restful-web-services-sfliveparis2012-2012-06-08"&gt;Designing HTTP Interfaces and RESTful Web Services (SFLiveParis2012 2012-06-08)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nakedsecurity.sophos.com/2013/11/20/serious-security-how-to-store-your-users-passwords-safely/"&gt;Serious Security: How to store your users' passwords safely&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://securitychecklist.org/"&gt;securitychecklist.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_k60dxlMjZ4"&gt;[DevFest Nantes 2015] REST from zero to hero in 45 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://float-middle.com/json-web-tokens-jwt-vs-sessions/"&gt;JSON Web Tokens (JWT) vs Sessions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ponyfoo.com/articles/json-web-tokens-vs-session-cookies"&gt;JSON Web Tokens vs. Session Cookies: In Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.appcanary.com/2017/http-security-headers.html"&gt;Everything you need to know about HTTP security headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kev.inburke.com/kevin/things-to-use-instead-of-jwt/"&gt;Things to Use Instead of JWT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="javascript"></category><category term="code"></category><category term="api"></category><category term="http"></category><category term="rest"></category><category term="express"></category><category term="json"></category><category term="web"></category></entry><entry><title>Continuous Integration</title><link href="https://romainpellerin.eu/continuous-integration.html" rel="alternate"></link><published>2015-09-18T11:29:00+02:00</published><updated>2022-09-24T12:11:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-09-18:/continuous-integration.html</id><summary type="html">&lt;p&gt;Why you should embrace continuous integration and how&lt;/p&gt;</summary><content type="html">&lt;p&gt;After having experienced software development in many languages, from desktop programs to mobile applications and web sites, comes a moment when I felt compelled to standardize my software development process. In the last couple of months, we, at &lt;a href="http://www.wearesmiths.com/"&gt;The Smiths&lt;/a&gt;, tried to define our workflow more formally by integrating continuous integration. How to properly "synchronize" a team made of many developers, "spread all around the world", in different time zones? How to make sure there is no bottleneck at any level, during the development? First, let’s have a look at the definition.&lt;/p&gt;
&lt;p&gt;What is &lt;strong&gt;continuous integration&lt;/strong&gt;? According to &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;Wikipedia&lt;/a&gt;, it's:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[...] the practice, in software engineering, of merging all developer working copies to a shared mainline several times a day.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But not only. It's much more than this. Let's dive into continuous integration.&lt;/p&gt;
&lt;h1 id="purpose"&gt;Purpose&lt;/h1&gt;
&lt;p&gt;Continuous integration is an entire concept that tries to ease software development by making things much easier and more flexible. Like agile methodology, it's been getting more and more popular since the beginning of the 2000's. Nowadays, it tends to be widely adopted in any kind of software company.&lt;/p&gt;
&lt;h2 id="effortless-automation"&gt;Effortless automation&lt;/h2&gt;
&lt;p&gt;Continuous integration is mostly about automation. By this, I mean being able to deploy flawlessly, many times a day. Like &lt;a href="https://romainpellerin.eu/i-want-to-be-a-more-efficient-developer.html"&gt;Quentin Adam&lt;/a&gt; is used to saying,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://twitter.com/waxzce/status/639078610230476800"&gt;Hosting has to become a commodity.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The same applies for documentation generation, testing and deploying. Repetitive tasks are most of the time painful and should be performed by computers.&lt;/p&gt;
&lt;h2 id="continuous-testing"&gt;Continuous testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Every new release should be tested.&lt;/strong&gt; Automatically. Without any human intervention. In a safe and minimal environment, not a human's environment with tons of programs, custom environment variables, outdated dependencies, etc. It's a human job to design the tests but running and validating them is a machine job. This way, the results can be shared with an entire team over automatic emails and archived.&lt;/p&gt;
&lt;h2 id="documentation"&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Writting documentation is for humans. Generating it is for machines. Again, it's a repetitive task that no one should be assigned. It's a waste of time. Machines can do it instead of us, at the right time, usually when a new release is about to come out. Furthermore, machines don't forget to bump the version numbers.&lt;/p&gt;
&lt;h2 id="deploying"&gt;Deploying&lt;/h2&gt;
&lt;p&gt;With continuous integration, deploying should be as simple as a &lt;a href="https://twitter.com/Tim_LHUILLIER/status/396652013716770816"&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/a&gt;. When time has come for deployment, no one has to use &lt;code&gt;ssh&lt;/code&gt; or &lt;code&gt;rcp&lt;/code&gt;, not even &lt;code&gt;ftp&lt;/code&gt;. &lt;strong&gt;It's unsafe insofar as it's too much of a risk to let a human get inside a production machine.&lt;/strong&gt; A developer has nothing to do in a production machine, as long as all the tests have been passed before pushing to production. All one can do is breaking something. A production machine is meant to be administrated by a sysadmin, no one else. Once it's set up, the only action required by developers is pushing code when it's ready to go live.&lt;/p&gt;
&lt;p&gt;It's the same story for releases. Packaging and releasing a new version &lt;strong&gt;must&lt;/strong&gt; be a simple task anyone can do, not only the CTO, regardless of the OS, configuration, and so on.&lt;/p&gt;
&lt;h1 id="why"&gt;Why&lt;/h1&gt;
&lt;p&gt;Now that I exposed the principles of &lt;strong&gt;continuous integration&lt;/strong&gt;, the question you may want to ask is "Yes, but why?". Indeed, prior to continuous integration, everything was already working well, more or less. So, you might wonder how anyone can benefit from continuous integration.&lt;/p&gt;
&lt;p&gt;In fact, continuous integration should simply be regarded as an entire development workflow. It enables your team of developers (or even a single developer) to be more agile. You can easily get rid of god-awful tasks without actually deleting them, just by delegating them to computers.&lt;/p&gt;
&lt;p&gt;In parallel, you can improve maintainability and evolutivity of the software produced by adopting the right versioning and bug tracking tools. How? Let's take an example.&lt;/p&gt;
&lt;p&gt;Remember in the old days, when you used to package your code into a zip file and name it according to the version? How boring it was to keep all of those files. Was it easy to track differences between two given versions? How could you determine the changes? How could you apply hotfixes on an old (but still in use) version as well as on the latest one? How could you know which developer had written which feature? Here come the version control systems, or more simply, Git.&lt;/p&gt;
&lt;p&gt;Another example. For every new version (and sometimes between two) you had to set up your environment correctly, generate the documentation from source code, bump the version number in both code and documentation, run unit/integration/system tests and finally, if everything goes well, compile it for &lt;strong&gt;as many platforms as you support&lt;/strong&gt; (which quite often would mean a lot), and make it available on a website (or somewhere else). Well, how pleasant would it be if &lt;strong&gt;all of this&lt;/strong&gt; could be achieved right after a &lt;code&gt;git push&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Let's now see how to get started with continuous integration, easily.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="how"&gt;How&lt;/h1&gt;
&lt;p&gt;Now, you might have understood that you &lt;strong&gt;have to use Git&lt;/strong&gt;. And if you stil don't know why, you read read my article &lt;a href="https://romainpellerin.eu/git.html"&gt;about Git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my opinion, the most important thing with continuous integration is... your Git workflow. You have to remain consistent from the beginning of a project to its end. Everyone involved has to be careful and focused at each step. Working within a big team is not something easy. Everyone has different schedules, information doesn't spread that well. That's why having a robust and error-proof Git workflow matters.&lt;/p&gt;
&lt;p&gt;At The Smiths, we identified &lt;strong&gt;four main components&lt;/strong&gt; that we wanted as &lt;strong&gt;core parts of our Continuous Integration process&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semantic versioning&lt;/li&gt;
&lt;li&gt;A Git workflow&lt;/li&gt;
&lt;li&gt;Travis-ci.org&lt;/li&gt;
&lt;li&gt;Agile methodology&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="semantic-versioning"&gt;Semantic versioning&lt;/h2&gt;
&lt;p&gt;We decided to stick to the very simple rules proposed by &lt;a href="http://semver.org/"&gt;semver.org&lt;/a&gt;. Basically, it says that a version number should be something like &lt;em&gt;MAJOR.MINOR.PATCH&lt;/em&gt;, where (what follows has been extracted from their website):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MAJOR version when you make incompatible API changes&lt;/li&gt;
&lt;li&gt;MINOR version when you add functionality in a backwards-compatible manner&lt;/li&gt;
&lt;li&gt;PATCH version when you make backwards-compatible bug fixes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sticking to this rule forced us to think more about the logic behind the versions, reshape road maps more precisely, and allowed us to bump our version numbers more cleverly. We applied this to our mobile apps and Titanium widgets, bumping version numbers carefully over time.&lt;/p&gt;
&lt;h2 id="a-successful-git-workflow"&gt;A Successful Git Workflow&lt;/h2&gt;
&lt;p&gt;This part is clearly the most important, as it’s being used every single day by everyone. In general, it’s likely the most important aspect about continuous integration, to which we had paid a lot of attention.&lt;/p&gt;
&lt;p&gt;After some research, we came across a very popular Git workflow, the branching model.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git workflow" src="https://romainpellerin.eu/images/continuous-integration-git-workflow.png"&gt;&lt;/p&gt;
&lt;p&gt;This picture has been taken from &lt;em&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model, by Vincent Driessen&lt;/a&gt;&lt;/em&gt; (&lt;a href="https://twitter.com/nvie/status/644601079985008640"&gt;thanks to him&lt;/a&gt;). Overall, it’s the best Git workflow we’ve ever encountered. &lt;strong&gt;So we adopted it, with some specificities: we made a few minor changes to that original branching workflow, in order to better suit our needs.&lt;/strong&gt; It can be applied to any kind of software project. I also need to mention that we use GitHub, the most famous web-based Git repository hosting service, because it offers some great features, such as Pull requests, a bug tracker (issues), etc. Moreover, as most of our code has been open sourced (except our clients’ core apps), it’s not a problem at all. By the way, it also gives us a greater visibility, it’s like giving away our widgets to the Titanium community thanks to GitHub.&lt;/p&gt;
&lt;p&gt;Now, let's move onto &lt;strong&gt;our workflow&lt;/strong&gt; that we daily use, with Github:&lt;/p&gt;
&lt;h3 id="our-git-workflow"&gt;Our Git workflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There is a remote repository called &lt;code&gt;origin&lt;/code&gt;. Then, every new developer (including the owner) has to fork this repository. The &lt;code&gt;origin&lt;/code&gt; repo will &lt;strong&gt;ONLY&lt;/strong&gt; contains two branches: &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;develop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt;: contains &lt;strong&gt;only the stable realeases&lt;/strong&gt; (General Availability), tagged with&lt;br&gt;
&lt;code&gt;git tag -a&lt;/code&gt;&lt;br&gt;
    Those are production releases.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;develop&lt;/code&gt;: contains &lt;strong&gt;only stable code&lt;/strong&gt; with newly developed features. This branch has been created with&lt;br&gt;
&lt;code&gt;git checkout -b develop master&lt;/code&gt;&lt;br&gt;
    It’s the latest cutting-edge release (Release Candidate). It may contains some bugs.&lt;/li&gt;
&lt;li&gt;No one is allowed to commit into &lt;code&gt;master&lt;/code&gt; nor into &lt;code&gt;develop&lt;/code&gt; (except for the first commit into &lt;code&gt;master&lt;/code&gt;, then &lt;code&gt;develop&lt;/code&gt; is forked from &lt;code&gt;master&lt;/code&gt;), in either &lt;code&gt;origin&lt;/code&gt; or the forked repository. Not even locally!&lt;/li&gt;
&lt;li&gt;There's &lt;strong&gt;one developer responsible for the entire project&lt;/strong&gt;. Let's call him/her &lt;em&gt;Integrator&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;To add a new feature, one of the developers create a local branch called &lt;code&gt;feature-x&lt;/code&gt; from &lt;code&gt;develop&lt;/code&gt; and commit into it. He/she may push this branch to their own forked repository.&lt;/li&gt;
&lt;li&gt;When this feature is fully developed and tested, and ready to go into &lt;code&gt;develop&lt;/code&gt;, the developer creates a &lt;em&gt;Pull request&lt;/em&gt; from the forked repository to &lt;code&gt;origin&lt;/code&gt; (from branch &lt;code&gt;feature-x&lt;/code&gt; to &lt;code&gt;develop&lt;/code&gt;). Then, &lt;strong&gt;only one person can accept it and merge it: &lt;em&gt;Integrator&lt;/em&gt;.&lt;/strong&gt; He/she can also refuses it and comment about the reason(s).&lt;/li&gt;
&lt;li&gt;If the &lt;em&gt;Pull request&lt;/em&gt; has been accepted, everyone has to update their &lt;code&gt;develop&lt;/code&gt; branch (locally and on their forked repo).&lt;/li&gt;
&lt;li&gt;The same applies for hotfixes: anyone can create branches called &lt;code&gt;hotfix-y&lt;/code&gt; and create &lt;em&gt;Pull requests&lt;/em&gt; from them.&lt;/li&gt;
&lt;li&gt;When time has come for a new release, &lt;em&gt;Integrator&lt;/em&gt; merges back &lt;code&gt;develop&lt;/code&gt; into &lt;code&gt;master&lt;/code&gt; and tags it with a release number (according to the Semantic versioning). Then, anyone update their &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Everyone is strongly encouraged to rebase on top of &lt;code&gt;master&lt;/code&gt; as often as possible, especially before submitting PRs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you're working alone on a project, no need to fork anything. Just apply the same principles to the only remote repository (&lt;em&gt;Pull requests&lt;/em&gt;, merge, etc). You can skip &lt;em&gt;Pull requests&lt;/em&gt; if you want so, it just helps keeping a trace of every new feature.&lt;/p&gt;
&lt;p&gt;I've found out that this workflow works pretty well with any of our projects, might it be an entire app or a mere widget. However, as I said we've made some adjustments to the original workflow found on the Internet, making it a bit simpler to use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issues&lt;/strong&gt; are also great features brought by GitHub that allow us to track down bugs and list them. One can assign people to fix an issue, and let others know of its progression thanks to emails or notifications. Issues can also be linked to specific commits which helps a lot when tracking regression bugs.&lt;/p&gt;
&lt;p&gt;Finally, we're also taking advantage of &lt;strong&gt;Milestones&lt;/strong&gt;, a GitHub feature, which can be seen as a simplified scheduler, permitting us to create deadlines with goals to reach. It's somehow a list of deadlines with progress bars automatically filled as we would create and merge Pull requests.&lt;/p&gt;
&lt;h4 id="some-commands"&gt;Some commands&lt;/h4&gt;
&lt;p&gt;To generate the message for a Pull request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git log --pretty&lt;span class="o"&gt;=&lt;/span&gt;oneline --abbrev-commit &amp;lt;branch-from&amp;gt;..&amp;lt;current-branch&amp;gt;
&lt;span class="c1"&gt;# Prints the commits you made since last merge and the associated messages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To update &lt;code&gt;develop&lt;/code&gt; (works with &lt;code&gt;master&lt;/code&gt; as well):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git fetch origin
git checkout develop
git merge --ff-only origin/develop
&lt;span class="c1"&gt;# Only fast forward is important to keep the history clear and clean&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To update a feature branch (after a PR has been merged):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git fetch origin
git checkout feature-x
&lt;span class="c1"&gt;# Three options (choose only one):&lt;/span&gt;
&lt;span class="c1"&gt;# 1.&lt;/span&gt;
git merge --ff-only origin/develop
&lt;span class="c1"&gt;# 2. If this fails because you have commits ahead, do:&lt;/span&gt;
git rebase origin/develop
&lt;span class="c1"&gt;# 3. If you&amp;#39;re a badass and want to ignore your own changes:&lt;/span&gt;
git reset --hard origin/develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To merge a &lt;em&gt;Pull request&lt;/em&gt; (only &lt;strong&gt;Ingrator&lt;/strong&gt; is supposed to do it) and push it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote add feature-x_repo git@github.com:someone/forked-repo.git
git fetch feature-x_repo feature-x
git checkout develop
git merge --no-ff feature-x_repo/feature-x &lt;span class="c1"&gt;# You could add --no-commit to edit files before committing&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;no fast forward&amp;#39; is important to keep the history clear and clean&lt;/span&gt;
git push origin develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To delete a branch (locally and remotely) once it has been merged into the main repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push feature-x_repo --delete feature-x
git branch -d feature-x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="contributors"&gt;Contributors&lt;/h3&gt;
&lt;p&gt;There's another approach to the scheme above. Instead of using only &lt;em&gt;Pull requests&lt;/em&gt;, you could add other developers as &lt;a href="https://help.github.com/articles/setting-guidelines-for-repository-contributors/"&gt;contributors&lt;/a&gt;. This way, there's no Mr/Ms &lt;strong&gt;Integrator&lt;/strong&gt;, any contributor is free to merge their features into &lt;code&gt;develop&lt;/code&gt;. Also, feature branches can be on the remote repository.&lt;/p&gt;
&lt;h3 id="git-branching-model-considered-harmful"&gt;Git branching model considered harmful&lt;/h3&gt;
&lt;p&gt;The Git workflow we used as a starting point (the branching model) has been considered harmful &lt;a href="https://barro.github.io/2016/02/a-succesful-git-branching-model-considered-harmful/"&gt;by someone, and thus that person proposed another model&lt;/a&gt;. The reading is worthwhile although I'm still not fully convinced by this alternative.&lt;/p&gt;
&lt;h2 id="travis-the-all-in-one-tool"&gt;&lt;a href="https://travis-ci.org/"&gt;Travis&lt;/a&gt;, the all-in-one tool&lt;/h2&gt;
&lt;p&gt;Soon, Travis will be your best friend. But first, what is Travis?&lt;/p&gt;
&lt;p&gt;Basically, it's an online service delivered through a website, providing sets of virtual machines started especially for a developer whenever needed. Those machines run some scripts and shut down themselves automatically. Usually, a developer sets up their Travis account to run scripts on every &lt;code&gt;git push&lt;/code&gt; performed on a GitHub repository. However, one can configure Travis to be run with any kind of Git hook. &lt;strong&gt;Travis is free&lt;/strong&gt; but they also have paid services with much more features (that we didn't require).&lt;/p&gt;
&lt;p&gt;So, how is Travis so helpful for us?&lt;/p&gt;
&lt;h3 id="most-common-use-cases-of-travis"&gt;Most common use cases of Travis&lt;/h3&gt;
&lt;p&gt;Well, one can imagine dozens of scenarios. Documentation generated from the source on every new &lt;code&gt;git push&lt;/code&gt; in &lt;code&gt;develop&lt;/code&gt;? Easy. Running a whole set of tests automatically? Easy as well.&lt;/p&gt;
&lt;p&gt;Let's dream a bit further... One of the most fancy things one can do is &lt;strong&gt;running a set of tests, bump version numbers in the code and the documentation, compiling the software program and generating the updated documentation, pushing the binaries to Amazon S3 and the documentation to GitHub Pages, and making the whole set available to everyone, automatically!&lt;/strong&gt; And yes, Travis, can push into specific branches as well. That might be really useful to update web pages automatically (a link to the latest stable release, listed on a download page, for instance).&lt;/p&gt;
&lt;p&gt;That is definitely the most perfect and automated scenario one could imagine, but that's easily achievable, although it would take quite a long time to set it up.&lt;/p&gt;
&lt;h3 id="an-example-with-github-pages"&gt;An example with Github Pages&lt;/h3&gt;
&lt;p&gt;A good example is my blog (yes, the one you're reading). My articles are written in Markdown and contained in the branch &lt;code&gt;master&lt;/code&gt;. However, what you're reading, is a &lt;a href="https://pages.github.com/"&gt;Github page&lt;/a&gt; (contained in a branch called &lt;code&gt;gh-pages&lt;/code&gt;). What is happening hunder the hood is that, every time I push on &lt;code&gt;master&lt;/code&gt;, Travis fetches it, generates the HTML pages from the Markdown files, and pushes them to the branch &lt;code&gt;gh-pages&lt;/code&gt; on Github. This way, my blog gets updated automatically.&lt;/p&gt;
&lt;p&gt;I followed &lt;a href="http://blog.mathieu-leplatre.info/publish-your-pelican-blog-on-github-pages-via-travis-ci.html"&gt;this tutorial&lt;/a&gt; to do that (and &lt;a href="http://fle.github.io/lectures/pelican-github-2014.html"&gt;this presentation&lt;/a&gt; as well).&lt;/p&gt;
&lt;h4 id="how-does-it-work"&gt;How does it work&lt;/h4&gt;
&lt;p&gt;At the root of your repo, just add a &lt;em&gt;.travis.yml&lt;/em&gt; with some pieces of configuration inside. And you're done! A few more options are available on their web interface as well.&lt;/p&gt;
&lt;p&gt;You can have a look at &lt;a href="https://github.com/rpellerin/blog/blob/master/.travis.yml"&gt;my .travis.yml for this blog&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="tips-with-travis"&gt;Tips with Travis&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/settings/tokens"&gt;Get a new token from Github&lt;/a&gt; in order to give Travis access to your repo&lt;/li&gt;
&lt;li&gt;In travis, disable &lt;em&gt;Build on Pull requests&lt;/em&gt;, enable only if .travis.yml is present&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="agile-methodology"&gt;Agile methodology&lt;/h2&gt;
&lt;p&gt;Last but not least, agile methodology. Behind that term that sounds rather complex is a concept pretty simple. In Computer Science, we use the term "Agile Software Development". Wikipedia says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Agile Software Development is a set of software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement, and encourages rapid and flexible response to change.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is also an official Agile Manifesto that tries to describe it more precisely, based on twelve principles. &lt;strong&gt;From that original manifesto have appeared dozens of practices that we refer to as "Agile methods"&lt;/strong&gt;. I won't explain them here as it is not the purpose, for more information visit the &lt;a href="https://en.wikipedia.org/wiki/Agile_software_development"&gt;Wikipedia page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The one we picked is called &lt;strong&gt;Scrum&lt;/strong&gt;. Again, I won't explain it here but will instead expose the workflow we adopted, derived from it. For a better comprehension, I recommend you read the &lt;a href="https://en.wikipedia.org/wiki/Scrum_(software_development)"&gt;Wikipedia page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, at the very beginning of the project, the CTO would meet client and discuss with them. As a result, he would obtain detailed specifications from them. Then, all together, we would brainstorm and define Milestones, which are fundamentally the most important steps to a final product. For instance, from scratch, we would aim at developing a MVP (which is a working product, see the picture below), then progressively add features, grouping features under Milestones. As a reminder, "Milestones" is a feature of GitHub. Each Milestone would last a week, tops. In Scrum, Milestones are called &lt;em&gt;Sprints&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Starting with an MVP is the right way to go. The client is always satisfied as they would get a working copy of the product being-developed, at each stage, continuously getting improved. They would not have to wait for weeks or months before being able to test anything.&lt;/p&gt;
&lt;p&gt;&lt;img alt="MVP" src="https://romainpellerin.eu/images/continuous-integration-mvp.png"&gt;&lt;/p&gt;
&lt;div style="text-align: center"&gt;*Courtesy of [Henrik Kniberg](https://twitter.com/henrikkniberg/status/685474589539983360)*&lt;/div&gt;

&lt;p&gt;Then, each developer would get assigned or choose a few features from the first Milestone until completion. Every morning, we would gather for a 10-minute stand-up meeting, during which everyone would say what they did the previous day and what is left to do, especially regarding the current day. Standing forces us to speak concisely and don't waste each other's time, since it is not as comfortable as being sat down.&lt;/p&gt;
&lt;p&gt;At the end of the Milestone's week, we would merge all the Pull requests resulting from the features, then review all together all the work done, conduct tests and create issues on GitHub to be resolved before starting the next Milestone. Eventually, we would readjust the remaining Milestones when needed.&lt;/p&gt;
&lt;p&gt;This would go on until completion of the final Milestone, which is supposed to bring all the features originally requested by the client.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SCRUM" src="https://romainpellerin.eu/images/continuous-integration-scrum.png"&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, the part "Bug fixing" would require extra-time. In such a case, we would extend that part onto the next week, only assigning one person, so that the rest of the team could stick strictly to the rule "a Milestone per week". But that rarely happened fortunately.&lt;/p&gt;
&lt;h2 id="mix-them-all"&gt;Mix them all&lt;/h2&gt;
&lt;p&gt;As a brief conclusion, when thinking back at all the parts of our workflow, one can see that it's an entire whole in which GitHub plays a key-role. Being organized, knowing everyone's role and keeping in mind goals to reach are important as well, just like the tools we decided to go with. Furthermore, being able to release intermediate versions, quickly, allowed us to give constant feedback to the client, which is reassuring.&lt;/p&gt;
&lt;p&gt;This workflow is surely perfectible, but until now it has proved really efficient.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
I hope this article was helpful. It's a good start with Continuous Integration. First, focus on your workflow (especially with Git) and then set up the right tools (including Travis) and you're good!&lt;/p&gt;
&lt;h1 id="resources-to-go-deeper"&gt;Resources to go deeper&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://putaindecode.fr/posts/ci/le-deploiement-continu/"&gt;Introduction au déploiement continu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://putaindecode.fr/posts/ci/introduction/"&gt;Qu'est-ce que l'intégration continue ?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.ircmaxell.com/2014/10/youre-doing-agile-wrong.html"&gt;You're Doing Agile Wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toggl.com/developer-methods-infographic"&gt;SOFTWARE DEVELOPMENT EXPLAINED WITH CARS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.martinfowler.com/articles/continuousIntegration.html"&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://putaindecode.io/fr/articles/ci/travis-ci/"&gt;Déploiement continu avec Travis-CI (et GitHub Pages)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrutinizer-ci.com/"&gt;Scrutinizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://k33g.github.io/2016/11/27/GH-FLOW.html"&gt;GitHub Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jCwzf9adAtE"&gt;Intégration et déploiement en continu @ Github (Alain Hélaïli)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="android"&gt;Android&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/android_guides/wiki/Automating-Publishing-to-the-Play-Store"&gt;Automating Publishing to the Play Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.stablekernel.com/deploying-google-play-continuous-delivery-android-part-4/"&gt;PUBLISH TO GOOGLE PLAY - CONTINUOUS DELIVERY FOR ANDROID (PART 4)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jeremie-martinez.com/2016/01/14/devops-on-android/"&gt;DevOps on Android: From one Git push to production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="code"></category><category term="workflow"></category><category term="git"></category></entry><entry><title>(Re)Learn A Programming Language Quickly</title><link href="https://romainpellerin.eu/learn-a-programming-language-quickly.html" rel="alternate"></link><published>2015-05-22T17:17:00+02:00</published><updated>2015-05-26T01:08:00+02:00</updated><author><name>Romain Pellerin</name></author><id>tag:romainpellerin.eu,2015-05-22:/learn-a-programming-language-quickly.html</id><summary type="html">&lt;p&gt;Need to (re)learn a programming language in less than 10 minutes? Here is how to do it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I need to learn a programming language quickly, or just recall it, I often use a few tips, very simple.&lt;/p&gt;
&lt;h1 id="data-types"&gt;Data Types&lt;/h1&gt;
&lt;p&gt;Also known as primitive data types. Data types are the very basis of every programming language. Knowing them allow you to manipulate variables, arrays, functions, etc. Generally, there are less than 10 of them. For example, Java has the following primitive data types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;String&lt;/code&gt; could also be considered as a primitive data type since it doesn't require the keyword &lt;code&gt;new&lt;/code&gt; to be instanciated.&lt;/p&gt;
&lt;h1 id="keywords"&gt;Keywords&lt;/h1&gt;
&lt;p&gt;While we're on the subject, keywords (also called "reserved words") are another excellent way to quickly recall a programming language. Here again, they are not so numerous, generally around 50. Here are some keywords in Java:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt;
&lt;span class="nc"&gt;continue&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Those words are reserved and used by the compiler, that's why you can't use them as variable names for example. Consequently, they give you a pretty clear overview of what you can do with each language. Furthermore, if you've already learnt that language, you'll then quickly remember what each keyword means. Then, just iterate through those keywords and in less than 5 minutes, you'll remember everything about this language!&lt;/p&gt;
&lt;h1 id="the-main-function"&gt;The main function&lt;/h1&gt;
&lt;p&gt;Each language has its own approach. Here are some of them:&lt;/p&gt;
&lt;h2 id="java"&gt;Java&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="c"&gt;C&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don't forget to know this function!&lt;/p&gt;
&lt;h1 id="have-a-look-at-some-of-your-previous-projects-or-code"&gt;Have a look at some of your previous projects... or code&lt;/h1&gt;
&lt;p&gt;Giving a quick look at projects helps a lot! Try to look at the basics: inherited classes, overloaded and overriding functions, asbstract classes, IO functions, etc. If you have time, try to code some of them again!&lt;/p&gt;
&lt;h1 id="further-reading"&gt;Further reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://learnxinyminutes.com/"&gt;Learn X in Y minutes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Code"></category><category term="code"></category><category term="programming"></category></entry></feed>